import os, string
import rsf.sftour
import rsf.doc
import rsf.prog

books = '''
bei
gee
'''

reports = '''
cwp
data
geo384w
geo391
hansung
icp
milano
rsf
sep
slim
swag
tccs
trip
tutorial
uwa
'''

nonreproducible = '''
geo391/hw2/sorting
rsf/bash/plot
rsf/rsf/plplot
rsf/tutorials/colormaps
slim/geo2008NewInsightsPareto/geop
slim/geo2008NewInsightsPareto/pareto
slim/slimUserManual/sffdct
tccs/diffr/chan3d
tccs/diffr/gom
tccs/avo/avo2
tccs/opwd/wrap
tccs/emdpf/fxdecon
tccs/emdpf/hyper
tccs/emdpf/linear
trip/hug/marm1s_shallow
tccs/synwav/gch1
'''

all =  ARGUMENTS.get('all', 'n')
size = int(ARGUMENTS.get('size', 1024))
size *= 1024

tested_projects = []

def publicproj(project):
    '''Check if the project is publicly accessible'''
    global all, size, tested_projects
    if project in tested_projects:
        return False
    tested_projects.append(project)
    if project in Split(nonreproducible):
        print '%s: Non-reproducible' % project
        return False
    if not os.path.isdir(project):
        print '%s: No such directory' % project
        return False
    os.chdir(project)
    # Skip if no .rsfproj
    if not os.path.isfile('.rsfproj'):
        print '%s: No rsfproj' % project
        return False
    # OK if all=y on the command line
    if all == 'y':
        return True
    # OK if no PRIVATE data
    g = {}
    l = {}
    execfile('.rsfproj',g,l)
    if 'PRIVATE' in l['data'] or 'LOCAL' in l['data']:
        print '%s: Private or local data' % project
        return False
    if not 'size' in l or l['size'] <= 0:
        print '%s: Wrong size' % project
        return False
    if size > 0 and l['size'] > size:
        print '%s: Large size' % project
        return False
    return True

def progtest(target=None,source=None,env=None):
    cwd = os.getcwd()
    for project in env.get('projects'):
        if publicproj(project):
            print 'Testing in %s' % project
            print '-----------' + '-'*len(project)
            if os.system('scons test'):
                return 1
        os.chdir(cwd)            
    return 0

def www(target=None,source=None,env=None):
    rsf.sftour.tour(map(str,source),'scons -Q www')
    return 0

env = Environment()
env.Command('www',Split(reports),Action(www))

for prog in rsf.doc.progs.keys():
    uses = rsf.doc.progs[prog].uses
    projects = []
    for book in uses.keys():
        for chapter in uses[book].keys():
            projects.extend(map(lambda x: os.path.join(book,chapter,x),
                                uses[book][chapter]))
    env.Command(prog+'.test',None,
                Action(progtest,varlist=['projects']),projects=projects)
    env.Alias('test',prog+'.test')
