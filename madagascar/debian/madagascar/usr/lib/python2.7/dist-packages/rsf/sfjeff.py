import rsf.doc

sfewefd2d_omp = rsf.doc.rsfprog('sfewefd2d_omp','user/jeff/Mewefd2d_omp.c','''2D elastic time-domain FD modeling ''')
sfewefd2d_omp.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd2d_omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd2d_omp.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd2d_omp.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd2d_omp.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd2d_omp.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd2d_omp.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd2d_omp.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd2d_omp.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd2d_omp.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd2d_omp.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd2d_omp.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd2d_omp.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd2d_omp.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd2d_omp.version('1.7')
sfewefd2d_omp.synopsis('''sfewefd2d_omp < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfewefd2d_omp']=sfewefd2d_omp

sfewefd3d_omp = rsf.doc.rsfprog('sfewefd3d_omp','user/jeff/Mewefd3d_omp.c','''3D elastic time-domain FD modeling ''')
sfewefd3d_omp.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd3d_omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd3d_omp.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd3d_omp.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd3d_omp.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd3d_omp.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd3d_omp.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd3d_omp.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd3d_omp.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd3d_omp.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd3d_omp.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd3d_omp.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd3d_omp.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewefd3d_omp.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd3d_omp.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd3d_omp.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewefd3d_omp.version('1.7')
sfewefd3d_omp.synopsis('''sfewefd3d_omp < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''''')
rsf.doc.progs['sfewefd3d_omp']=sfewefd3d_omp

sfmodelcreate = rsf.doc.rsfprog('sfmodelcreate','user/jeff/Mmodelcreate.c','''Create a dipping layer model for HTI testing purposes.  Has fixed velocity structure, but can change dip of layer and degree of anisotropy.''')
sfmodelcreate.par('ompchunk',rsf.doc.rsfpar('int','1','','''set the omp chunk size '''))
sfmodelcreate.par('verb',rsf.doc.rsfpar('bool','y','','''verbose or note (Y/n) '''))
sfmodelcreate.par('aniso',rsf.doc.rsfpar('bool','n','','''flag (y/N) for anisotropic layer #2 '''))
sfmodelcreate.par('allaniso',rsf.doc.rsfpar('bool','n','','''flag (y/N) whether entire model is anisotropic '''))
sfmodelcreate.par('ein',rsf.doc.rsfpar('float','.1','','''epsilon anisotropy parameter '''))
sfmodelcreate.par('din',rsf.doc.rsfpar('float','.1','','''delta anisotropy parameter '''))
sfmodelcreate.par('gin',rsf.doc.rsfpar('float','.2','','''gamma anisotropy parameter '''))
sfmodelcreate.par('rho',rsf.doc.rsfpar('float','2.','','''Background Density model '''))
sfmodelcreate.par('d',rsf.doc.rsfpar('float','n3/6.','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.par('a',rsf.doc.rsfpar('float','1','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.par('b',rsf.doc.rsfpar('float','1','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.version('1.7')
sfmodelcreate.synopsis('''sfmodelcreate < Fu.rsf > Fc.rsf ompchunk=1 verb=y aniso=n allaniso=n ein=.1 din=.1 gin=.2 rho=2. d=n3/6. a=1 b=1''','''''')
rsf.doc.progs['sfmodelcreate']=sfmodelcreate

