#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from iwave import getFlowSignature
WORKPATH        = os.getenv('DATAPATH')
# todo: WORKPATH should be checked
#Decider('timestamp-match')
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
RSFBIN          = os.getenv('RSFROOT') + '/bin/'
stdmdl          = os.path.join(RSFBIN,'sfstandardmodel')
IWAVE           = os.getenv('NEWIWAVE')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
acd             = os.path.join(IWAVE,'acdpml/main/acdpml.x')

######### fetch list - non-reproducible data fetched from web archive.
# the format for this dictionary is 
#    filename : [<subdir of "data" directory in archive>, <archive URL>]
# Example: 
# fetches = {
#            'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
#            'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],	
#           }
fetches = {}

######### non-IWAVE flows - include these in standard Madagascar form
# sunull writes to stdout but does not read from stdin, so set
# stdin=0
Flow('hdr3-7km.su', 'csq_4layer.rsf',
     sunull + ' nt=651 ntr=2000 dt=0.008 | ' + 
     sushw + ' key=sx a=3000 c=400 j=200 | ' + 
     sushw + ' key=gx a=2000 b=25 j=200 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-1000 | ' + 
     sushw + ' key=gelev a=-1000 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

# note: if a filename does not have an embedded ".", it's presumed to
# be the root filename of an rsf.  stdmdl does not read data from
# stdin or write data to stdout (it writes verbose comments and
# warnings, but that's not data) so set both stdin and stdout=0
Flow('vel_4layer','',
      stdmdl + \
      '''
      choose=2 model=10 
      m2_numl=3 m2_val1=1.500 
      m2_rf1=3600 m2_val2=2.0 
      m2_rf2=5000 m2_val3=2.5 
      hfile=vel_4layer.rsf 
      n1=280 d1=25 f1=0 
      n2=400 d2=25 
      o2=0 n3=1 d3=1 o3=0
      ''',
      stdin=0, stdout=0)

# sfadd writes output to stdout, so it must be left active - 
# however there is not pipe input to this command, so stdin=0
Flow('csq_4layer','vel_4layer',
     'sfadd mode=p ${SOURCES[0]} ${SOURCES[0]} | sfput data_type=csq ', stdin=0)

# smooth csq_4layer to make migration velocity model
Flow('csq_4layersm','csq_4layer','smooth rect1=50 rect2=50 repeat=4')
Flow('csq_4layersm2','csq_4layer','smooth rect1=5 rect2=5 repeat=4')
Flow('dcsq_4layer', ['csq_4layer', 'csq_4layersm2'],
     'add mode=a scale=1,-1 < csq_4layer.rsf csq_4layersm2.rsf') 

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('wavelet_base.su','',
     suwaveform + ' type=gaussd fpeak=10 ns=101 | ' + 
     sushw + ' key=delrt  a=-100 | ' +  
     sugain + ' scale=1.e6 > ${TARGETS[0]} ',
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['3-7km']:
    Flow('wavelet' + foo + '.su', ['wavelet_base.su', 'hdr' + foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# trace-src output file
t=Flow(['line3-7km.work', 'line3-7km.su'],['wavelet3-7km.su','csq_4layer.rsf'],
	'''
	/bin/cp hdr3-7km.su line3-7km.su;
	/bin/rm -rf line3-7km.work; 
	/bin/mkdir line3-7km.work; 
	cd line3-7km.work;
	'''
	 +  acd  + ' par=../line3-7km.par',stdin=0,stdout=0)
Clean(t,'line3-7km.work')

# linearized modeling
t=Flow(['born3-7km.work', 'born3-7km.su'],['wavelet3-7km.su','csq_4layersm.rsf','dcsq_4layer.rsf'],
	'''
	/bin/cp hdr3-7km.su born3-7km.su;
	/bin/rm -rf born3-7km.work; 
	/bin/mkdir born3-7km.work; 
	cd born3-7km.work;
	'''
	 +  acd  + ' par=../born3-7km.par',stdin=0,stdout=0)
Clean(t,'born3-7km.work')

# rtm
t=Flow(['migr3-7km.work', 'mcsq_4layer.rsf'],['born3-7km.su'],
	'''
	sfscale < dcsq_4layer.rsf > mcsq_4layer.rsf dscale=0.0;
	/bin/rm -rf migr3-7km.work; 
	/bin/mkdir migr3-7km.work; 
	cd migr3-7km.work;
	'''
	 +  acd  + ' par=../migr3-7km.par',stdin=0,stdout=0)
Clean(t,'migr3-7km.work')

Result('line3-7km','line3-7km.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Node d2=0.4km o2=8 unit1=s unit2=km title="Nodes @0.4km" label=Pressure unit=GPa |sfgrey scalebar=y barreverse=y')

Result('born3-7km','born3-7km.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Trace unit1=s title="Born x_s=3-7km" unit=GPa | sfgrey')

Result('mcsq_4layer', 'mcsq_4layer', 'put label1=Depth unit1=m label2 = Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="RTM of Born Shot x_s = 3-7km" clip=1.e+14')

End()

