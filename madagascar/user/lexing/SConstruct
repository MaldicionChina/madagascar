import os, sys, string
sys.path.append('../../framework')
import bldutil

progs = '''
lrmatrix
'''

subs = '''
vecmatop
'''

try:  # distributed version
    Import('env root bindir pkgdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c++/SConstruct')

inc = Glob('[a-z]*.hh')

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libs = [env.get('DYNLIB','')+'rsf++',
            env.get('DYNLIB','')+'rsf']
    if not isinstance(lapack,bool):
        libs.extend(lapack)
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=libs)

    ccfiles = map(lambda x: x+'.cc',Split(subs))

    lib = env.StaticLibrary('vecmatop',ccfiles,CCFLAGS='')
    env.Install('../../lib',lib)
    env.Install('../../include',inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,
                           map(lambda x: x + '.cc',sources)+[lib])
        env.Depends(prog,inc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),
               Split(progs))
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
