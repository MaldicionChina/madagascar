import os, sys, re, string
sys.path.append('../../framework')
import bldutil


######################################################################
# 1. C main programs
progs = '''
dlct fpocs2d fpocs3d istseislet lsinterp2d lsprtm2d lsrtm2d mcaseislet
modeling2d mshots mwni2d myradon2 mysnr pocs rtm2d rtmadcig Testaniso
Testeb Testelastic2d Testfd2d Testfd3d Testspml viscoa2d viscoe2d
'''

######################################################################
# 2. C++ main programs
ccprogs = '''
'''

######################################################################
# 3. MPI main programs
mpi_cprogs = '''
'''

######################################################################
# 4. CUDA main programs
cuda_progs = '''
fbrec gpurtm gpufwi genshots gpufd3d gpufbrec3d 
'''

######################################################################
# 5. CUDA+MPI main programs
cuda_mpi_progs = '''
mpigpufwi
'''

######################################################################
# 6. F90 main programs
f90_progs = '''
'''

######################################################################
# 7. python mains programs
pyprogs='''
shuffle_test
'''
pymods='''
'''

######################################################################
try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')
    SConscript('../../api/c++/SConstruct')
    SConscript('../../api/f90/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
                  env.get('DYNLIB','')+'rsf'])

# fftw settings
fftw = env.get('FFTW') 		#fftw = env.get('FFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

# suitesparse settings
sparsepath = env.get('SPARSEPATH')
sparselibs = env.get('SPARSELIBS')
    
if sparsepath and sparselibs:
    env.Prepend(CPPPATH=sparsepath,
                LIBS=sparselibs)

F90 = env.get('F90')
api = env.get('API',[])

if 'f90' in api and F90:
    env.Prepend(F90PATH=['../../include'],
                LIBS=[env.get('DYNLIB','')+'rsff90'])
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

######################################################################
# 1. compiling C programs
cmains = Split(progs)
for prog in cmains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if fftw:
        env.StaticObject('M'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw')
    if root:
        env.Install(bindir,prog)

######################################################################
# 2. compiling C++ programs
if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

######################################################################
# 3. compiling MPI programs
mpicc = env.get('MPICC')
mpi_cmains = Split(mpi_cprogs)
for prog in mpi_cmains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
    	prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
    else:
	prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)


######################################################################
# 4. compiling CUDA programs
CTP = env.get('CUDA_TOOLKIT_PATH')
NVCC = env.get('NVCC')

cuda_mains = Split(cuda_progs)
for prog in cuda_mains:
    if CTP and NVCC:
        cfile = env.Command('CUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        cc = env.get('CC')
        cflags = '--x=cu -O'
        ldflags = '-lcublas -lcufft -lcusparse'
        if string.rfind(cc,'icc') >= 0:
            cflags = cflags + ' -ccbin=%s' % cc
            ldflags = '-ccbin=%s' % cc
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           LINKFLAGS=ldflags,
                           CFLAGS=cflags)
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please check if CUDA is not missing and is installed correctly.
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)

#######################################################################
# 5. compiling CUDA+MPI programs

# YOU MAY HAVE TO EDIT THIS SECTION!!!
# MPI_LIB and MPI_INC must be defined for your specific system
MPI_LIB = '/usr/lib/openmpi/lib'	# MPI lib directory (contains libmpi.so)
MPI_INC = '/usr/lib/openmpi/include'	# MPI include directory	(contains mpi.h)

mpi_err = 0
if not os.path.exists(MPI_LIB + "/libmpi.so"):
	mpi_err += 1
if not os.path.exists(MPI_INC + "/mpi.h"):
	mpi_err += 1 


cuda_mpi_mains = Split(cuda_mpi_progs)
for prog in cuda_mpi_mains:
    if CTP and NVCC and (mpi_err == 0):
        cfile = env.Command('MPICUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           LINKFLAGS='-L'+MPI_LIB+' -lmpi',
                           CFLAGS='-I'+MPI_INC+' --x=cu')
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please ensure CUDA and MPI are installed correctly.
                             Install script was unable to locate your mpi lib and/or include directory
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)

######################################################################
# 6. compiling fortran programs

f90_mains = Split(f90_progs)

if 'f90' in api and F90:
    env.Prepend(F90PATH=['../../include'],
                LIBS=[env.get('DYNLIB','')+'rsff90'])
    F90base =  os.path.basename(F90)
    if F90base[:8] == 'gfortran' or F90base[:3] == 'gfc':
        env.Append(F90FLAGS=' -J${SOURCE.dir}')
    elif F90base[:5] == 'ifort':
        env.Append(F90FLAGS=' -module ${SOURCE.dir}')

for prog in f90_mains:
    sources = ['M' + prog]
    if 'f90' in api and F90:
        bldutil.depends90(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.f90',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='F90')        
    if root:
        env.Install(bindir,prog)

######################################################################
# 7. compiling python programs, python API not needed

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),cmains+mpi_cmains) + \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) +\
	   map(lambda prog: env.Doc(prog,'M' + prog+'.cu'),cuda_mains + cuda_mpi_mains)+ \
	   map(lambda prog: env.Doc(prog,'M'+prog+'.f90',lang='f90'),f90_mains)+\
	   map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

