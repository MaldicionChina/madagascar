import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
blend cabs diff emd fxdecon low prekirch simidenoise simidenoise1 snr2
threshold1 tsmf
'''

ccprogs = ''

# mutter3

mpiprogs=''

tprogs='''
cblas eno1 eno2 eno3 spline 
'''
pyprogs='''
pyran
'''
pymods='''

'''

docs = []

try: # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')
src = Glob('[a-z]*.c')
dynpre = env.get('DYNLIB','') 

libs = [dynpre+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

lapack = env.get('LAPACK')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynpre+'rsfpwd',dynpre+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

######################################################################
#USING PETSC (One should specify the absolute dir in petsccpp and petsclib.)
######################################################################

petsccpp=os.environ.get("PETSCCPP")
petsclib=os.environ.get("PETSCLIB")

if petsclib:
    env.Prepend(CPPPATH=[petsccpp],
            LIBPATH=[petsclib],
            LIBS='')
    libs = [libs, 'petsc']

######################################################################
# Compiling main programs
######################################################################

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# Compiling c++ programs
######################################################################


ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if 'c++' in env.get('API',[]):
        prog = env.Program(prog,map(lambda x: x + '.cc',sources),
                           LIBS=[dynpre+'rsf++']+libs)
        if root:
            install = env.Install(bindir,prog)
            
            if dynpre and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                                  '%s -change build/api/c/libdrsf.dylib '
                                  '%s/libdrsf.dylib %s' % \
                                  (WhereIs('install_name_tool'),libdir,install[0]))
                env.AddPostAction(install,
                                  '%s -change build/api/c++/libdrsf++.dylib '
                                  '%s/libdrsf++.dylib %s' % \
                                  (WhereIs('install_name_tool'),libdir,install[0]))
    else:
        prog = env.RSF_Place('sf'+prog,None,package='c++')
        if root:
            env.Install(bindir,prog)

######################################################################
# Compiling mpi programs ("MPILIB MPICPP" is user defined.)
######################################################################

mpicc  = env.get('MPICC')
mpimains = Split(mpiprogs)

mpilib = os.environ.get("MPILIB")
mpicpp = os.environ.get("MPICPP")
 
for prog in mpimains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if lapack:	
    	if mpicc and mpilib:
           env.Prepend(CPPPATH=[mpicpp],
                    LIBPATH=[mpilib],
                    LIBS='')
           prog = env.Program(prog,
                           map(lambda x: x + '.c',sources),
                           CC=mpicc,LIBS=[libs,'X11'])
    	else:
	   prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
        if root:
           env.Install(bindir,prog)

######################################################################
# Compiling testing programs
######################################################################

tmains = Split(tprogs)
for prog in tmains:
    if lapack:
    	sources = ['Test' + prog]
    	if prog=='clapack':
           sources.append('solver')
    	bldutil.depends(env,sources,'Test'+prog)
    	sources = map(lambda x: x + '.o',sources)
    	env.Object('Test' + prog + '.c')
    	prog=env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',LIBS=libs)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
	user = os.path.basename(os.getcwd())
	main = 'sf%s.py' % user
	
	docs += map(lambda prog: env.Doc(prog,'M' + prog),mains)  + \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) + \
		map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
	env.Depends(docs,'#/framework/rsf/doc.py')	
	doc = env.RSF_Docmerge(main,docs)
	env.Install(pkgdir,doc)
