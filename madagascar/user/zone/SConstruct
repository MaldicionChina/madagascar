import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
kirmod_newton 
'''

ccprogs = ''' 
'''


try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

########################################################################
# C progs and MPI
########################################################################

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    if not source in Glob('mpi*.c'):
        obj = env.StaticObject(source)
        env.Depends(obj,inc)

mpicc = env.get('MPICC')

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if prog[:3] == 'mpi':
        if mpicc:
            prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
        else:
            prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    else:
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

########################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
