sfmakevel = rsf.doc.rsfprog('sfmakevel','su/main/makevel.c','''Make a velocity function v(x,y,z) ''')
sfmakevel.par('n2',rsf.doc.rsfpar('int','','','''number of x samples (2nd dimension), must be provided!'''))
sfmakevel.par('n1',rsf.doc.rsfpar('int','','','''number of z samples (1st dimension)), must be provided!'''))
sfmakevel.par('n3',rsf.doc.rsfpar('int','1','','''number of y samples (3rd dimension)'''))
sfmakevel.par('d2',rsf.doc.rsfpar('float','1.0','','''2nd dimension sampling interval'''))
sfmakevel.par('d3',rsf.doc.rsfpar('float','1.0','','''3rd dimension sampling interval'''))
sfmakevel.par('d1',rsf.doc.rsfpar('float','1.0','','''1st dimension sampling interval'''))
sfmakevel.par('o2',rsf.doc.rsfpar('float','0.0','','''Origin 2nd dimension'''))
sfmakevel.par('o3',rsf.doc.rsfpar('float','0.0','','''Origin 3rd dimension'''))
sfmakevel.par('o1',rsf.doc.rsfpar('float','0.0','','''Origin 1st dimension'''))
sfmakevel.par('v000',rsf.doc.rsfpar('float','2.0','','''velocity at (x=0,y=0,z=0)'''))
sfmakevel.par('dvdx2',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 2nd dimension'''))
sfmakevel.par('dvdx3',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 3rd dimension'''))
sfmakevel.par('dvdx1',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 1st dimension'''))
sfmakevel.par('x2lens',rsf.doc.rsfpar('float','fx','','''2nd dimension coordinate of center of parabolic lens'''))
sfmakevel.par('x3lens',rsf.doc.rsfpar('float','fy','','''3rd dimension coordinate of center of parabolic lens'''))
sfmakevel.par('x1lens',rsf.doc.rsfpar('float','fz','','''1st dimension coordinate of center of parabolic lens'''))
sfmakevel.par('vlens',rsf.doc.rsfpar('float','0.0','','''velocity perturbation in parabolic lens'''))
sfmakevel.par('dlens',rsf.doc.rsfpar('float','1.0','','''diameter of parabolic lens'''))
sfmakevel.par('tlens',rsf.doc.rsfpar('float','1.0','','''thickness of parabolic lens'''))
sfmakevel.par('vran',rsf.doc.rsfpar('float','0.0','','''standard deviation of random perturbation'''))
sfmakevel.par('vx1ran',rsf.doc.rsfpar('float','0.0','','''standard deviation of random perturbation to 1st dimension'''))
sfmakevel.par('vx1c',rsf.doc.rsfpar('float','0.0','','''1st dimension v(z) chirp amplitude'''))
sfmakevel.par('x11c',rsf.doc.rsfpar('float','fz','','''1st dimension at which to begin chirp'''))
sfmakevel.par('x12c',rsf.doc.rsfpar('float','fz+(nz-1)*dz','','''1st dimension at which to end chirp'''))
sfmakevel.par('l1c',rsf.doc.rsfpar('float','dz','','''wavelength at beginning of chirp'''))
sfmakevel.par('l2c',rsf.doc.rsfpar('float','dz','','''wavelength at end of chirp'''))
sfmakevel.par('exc',rsf.doc.rsfpar('float','1.0','','''exponent of chirp'''))
sfmakevel.par('vzfile',rsf.doc.rsfpar('string ',desc=''''''))
sfmakevel.par('vx1file',rsf.doc.rsfpar('string ',desc='''file containing v(z) 1st dimension profile'''))
sfmakevel.version('1.7')
sfmakevel.synopsis('''sfmakevel > out.rsf n2= n1= n3=1 d2=1.0 d3=1.0 d1=1.0 o2=0.0 o3=0.0 o1=0.0 v000=2.0 dvdx2=0.0 dvdx3=0.0 dvdx1=0.0 x2lens=fx x3lens=fy x1lens=fz vlens=0.0 dlens=1.0 tlens=1.0 vran=0.0 vx1ran=0.0 vx1c=0.0 x11c=fz x12c=fz+(nz-1)*dz l1c=dz l2c=dz exc=1.0 vzfile= vx1file=''','''''')
rsf.doc.progs['sfmakevel']=sfmakevel

