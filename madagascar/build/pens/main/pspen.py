sfpspen = rsf.doc.rsfprog('sfpspen','pens/main/Mpspen.c','''Vplot filter for Postscript. ''')
sfpspen.par('colormask',rsf.doc.rsfpar('bools','','',''' [5]'''))
sfpspen.par('red',rsf.doc.rsfpar('floats','','',''' [4]'''))
sfpspen.par('green',rsf.doc.rsfpar('floats','','',''' [4]'''))
sfpspen.par('blue',rsf.doc.rsfpar('floats','','',''' [4]'''))
sfpspen.par('ppi',rsf.doc.rsfpar('float','','','''pixels per inch '''))
sfpspen.par('dumbfat',rsf.doc.rsfpar('bool','n','',''''''))
sfpspen.par('color',rsf.doc.rsfpar('bool','n','','''use color '''))
sfpspen.par('force',rsf.doc.rsfpar('bool','n','','''if y, don't replace colors with their compliments '''))
sfpspen.par('forcebw',rsf.doc.rsfpar('bool','n','','''if y, don't replace black and white colors with their compliments '''))
sfpspen.par('force_raster',rsf.doc.rsfpar('bool','y','','''if y, don't replace raster colors with their compliments '''))
sfpspen.par('rgb',rsf.doc.rsfpar('bool','y','','''For figures turned into GEOPHYSICS, use "rgb=no". '''))
sfpspen.par('tex',rsf.doc.rsfpar('bool','n','',''''''))
sfpspen.par('hold',rsf.doc.rsfpar('bool','n','','''tells the printer to not print the job until you
       add paper through the manual feed slot '''))
sfpspen.par('copies',rsf.doc.rsfpar('int','1','','''number of copies '''))
sfpspen.par('corners',rsf.doc.rsfpar('bool','y','','''n - remove "corner" group. '''))
sfpspen.par('mono',rsf.doc.rsfpar('bool','n','','''no color '''))
sfpspen.par('endpause',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('cachepipe',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('shade',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('wantras',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('window',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('frame',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('overlay',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('invras',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('txsquare',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('serifs',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('background',rsf.doc.rsfpar('bool','','',''''''))
sfpspen.par('redpow',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('greenpow',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('bluepow',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('dither',rsf.doc.rsfpar('int','','','''dithering to improve raster display, see "man vplotraster"
                    0    No dither,
                    1    Random Dither
                    2    Ordered Dither
                    3    Minimized Average Error Method
                    4    Digital Halftoning '''))
sfpspen.par('greyc',rsf.doc.rsfpar('float','','','''"grey correction" modifies the grey scale used to display a raster to simulate the nonlinearity of displays, see "man vplotraster" '''))
sfpspen.par('pixc',rsf.doc.rsfpar('float','','','''"pixel  correction" controls  alteration of the grey scale, see "man vplotraster". '''))
sfpspen.par('txfont',rsf.doc.rsfpar('int','','',''''''))
sfpspen.par('txprec',rsf.doc.rsfpar('int','','',''''''))
sfpspen.par('txovly',rsf.doc.rsfpar('int','','',''''''))
sfpspen.par('xcenter',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('ycenter',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('patternmult',rsf.doc.rsfpar('float','1.','',''''''))
sfpspen.par('pause',rsf.doc.rsfpar('int','0','',''''''))
sfpspen.par('fatmult',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('rotate',rsf.doc.rsfpar('int','0','',''''''))
sfpspen.par('txscale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('mkscale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('dashscale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('scale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('xscale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('yscale',rsf.doc.rsfpar('float','1.0','',''''''))
sfpspen.par('xshift',rsf.doc.rsfpar('float','0.','',''''''))
sfpspen.par('yshift',rsf.doc.rsfpar('float','0.','',''''''))
sfpspen.par('xwmax',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('ywmax',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('xwmin',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('ywmin',rsf.doc.rsfpar('float','','',''''''))
sfpspen.par('fat',rsf.doc.rsfpar('int','0','','''base line fatness '''))
sfpspen.par('printer',rsf.doc.rsfpar('string ',desc='''what printer to send it to '''))
sfpspen.par('paper',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('label',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('erase',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('break',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('interact',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('style',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.par('size',rsf.doc.rsfpar('string ',desc=''''''))
sfpspen.version('1.7')
sfpspen.synopsis('''sfpspen colormask= red= green= blue= ppi= dumbfat=n color=n force=n forcebw=n force_raster=y rgb=y tex=n hold=n copies=1 corners=y mono=n endpause= cachepipe= shade= wantras= window= frame= overlay= invras= txsquare= serifs= background= redpow=1.0 greenpow=1.0 bluepow=1.0 dither= greyc= pixc= txfont= txprec= txovly= xcenter= ycenter= patternmult=1. pause=0 fatmult= rotate=0 txscale=1.0 mkscale=1.0 dashscale=1.0 scale=1.0 xscale=1.0 yscale=1.0 xshift=0. yshift=0. xwmax= ywmax= xwmin= ywmin= fat=0 printer= paper= label= erase= break= interact= style= size=''','''
   output is in PostScript language; if not redirected, it is sent to
   lpr -Ppostscript   (override with $PSPRINTER environment variable.)
''')
rsf.doc.progs['sfpspen']=sfpspen

