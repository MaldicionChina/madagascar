/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_clip_h
#define _pen_clip_h


int clip (int *x1, int *y1, int *x2, int *y2);
/*< Cohen-Sutherland Clipping routine >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_dashvec_h
#define _pen_dashvec_h


void dashvec (int x1, int y1, int x2, int y2, int nfat, int dashon);
/*< Utility routine to make dashed lines. 
 * Should ONLY be called if dashon > 0 >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_dither_h
#define _pen_dither_h


void
dithline (unsigned char *inpline, 
	  unsigned char *outline, int npixels, int linenum, int imethod);
/*< dithered line >*/

#endif
#ifndef _pens_vertex_h
#define _pens_vertex_h

struct vertex
{
	int x;
	int y;
	struct vertex *next;		/* pointer to next vertex */
	struct vertex *last;		/* pointer to last vertex */
	struct vertex *soft;		/* pointer to some other vertex */
};

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_dupside_h
#define _pen_dupside_h




int dupside (register struct vertex *base);
/*< Determine if other sides in the polygon are
 * identical to the side specified by the
 * vertices v and v->b. >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_error_h
#define _pen_error_h


int ERR (int type, char *filter, const char *fmt,...);
/*<  error reporting for VPLOT filters
 * To print text to the outside world, other routines must go through err,
 * which in turn must go through message. >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_fatvec_h
#define _pen_fatvec_h


void fatvec (int x1, int y1, int x2, int y2, int nfat, int dashon);
/*< Utility routine to make fat vectors from several thin ones.
 * Should ONLY be called if nfat > 0 and dashon = 0
 *
 * Algorithm by Glenn Kroeger
 * Changes added by Joe Dellinger to make it more efficient when plotting >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_geth_h
#define _pen_geth_h


short geth(FILE *iop);
/*< get short >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_greycorr_h
#define _pen_greycorr_h


int greycorr (int colornum);
/*< Utility to modify color tables for plotting grey rasters. >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_intersect_h
#define _pen_intersect_h


int intersect (int x, int *crosses, struct vertex  *head, int scany);
/*< intersect >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_solve_h
#define _pen_solve_h


int solve (int pnot, int p1, int q1, int p2, int q2);
/*< compute intersection - floating point version >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_sort_h
#define _pen_sort_h


void sort (int *vec, int n);
/*< sort the elements of vec into ascending order >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_vecoutline_h
#define _pen_vecoutline_h


void vecoutline (struct vertex  *head);
/*< Draw the outline of the polygon pointed to by 'head'.  If any side of
 * the polygon is identical to any other (that is they have identical
 * endpoints), then neither line is drawn.  This allows among things a
 * doughnut to be defined by a single polygon without the line that
 * connects the inner and outer being plotted. >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_vptodev_h
#define _pen_vptodev_h


void vptodevxy (int x, int y, int *outx, int *outy);
/*< convert vplot coordinates to device coordinates >*/


void vptodevw (int x1, int y1, int x2, int y2, 
	       int *x1out, int *y1out, int *x2out, int *y2out);
/*< convert vplot coordinates to device coordinates >*/


void devtovpxy (int x, int y, int *outx, int *outy);
/*< convert device coordinates to vplot coordinates >*/


void devtovpw (int x1, int y1, int x2, int y2, 
	       int *x1out, int *y1out, int *x2out, int *y2out);
/*< convert device coordinates to vplot coordinates >*/


void vptodevxy_text (int x, int y, int *outx, int *outy);
/*< convert vplot coordinates to device coordinates >*/

#endif
