/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genarea_h
#define _pen_genarea_h


void genarea (int npts, struct vertex  *head);
/*< Device Independent Polygon treatment.
 * Do a first-pass sort of clipping using
 * polysubs, and then finish the job by calling polyfix and
 * polystart. >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genhatch_h
#define _pen_genhatch_h


void genhatch (int npts, int numhatch, float angle, 
	       int *hafat, int *hacol, int *haoff, int *hasiz, 
	       struct vertex  *head);
/*< genhatch >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_geninteract_h
#define _pen_geninteract_h

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genmarker_h
#define _pen_genmarker_h


void genmarker (int npts, int type, int size, int *pvec);
/*< device-independent marker >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genmessage_h
#define _pen_genmessage_h


void genmessage (int command, const char *string);
/*< Device independent subroutine to handle message operations >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genpatarea_h
#define _pen_genpatarea_h


void genpatarea (int npts, struct vertex  *head);
/*< patarea >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genpoint_h
#define _pen_genpoint_h


void genpoint (int x1, int y1);
/*< device-independent point >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genraster1_h
#define _pen_genraster1_h

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genraster_h
#define _pen_genraster_h


void genraster (int count, int out_of, int xpos, int ypos, int length, int orient, 
		unsigned char **raster, int dummy1, int dummy2);
/*< device-independent raster >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_gentext_h
#define _pen_gentext_h


void gentext (char *string, float pathx, float pathy, float upx, float upy);
/*< interpret characters into vectors >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_genvector_h
#define _pen_genvector_h


void genvector (int x1, int y1, int x2, int y2, int nfat, int dashon);
/*< device-independent vector >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_nulldev_h
#define _pen_nulldev_h


void nulldev (void);
/*<  All purpose Do-nothing generic subroutine >*/


void nullclose (int status);
/*<  All purpose Do-nothing generic subroutine >*/


void nullmidpoly (int x, int y);
/*<  All purpose Do-nothing generic subroutine >*/


void nullarea (int npts, struct vertex  *head);
/*<  All purpose Do-nothing generic subroutine >*/


void nullraster(int xpix, int ypix, int xmin, int ymin, int xmax, int ymax, 
		unsigned char **raster_block, int orient, int dither_it);
/*<  All purpose Do-nothing generic subroutine >*/


void nullattributes(int command, int value, int v1, int v2, int v3);
/*<  All purpose Do-nothing generic subroutine >*/


int nullgetpoint (int *x, int *y);
/*<  All purpose Do-nothing generic subroutine >*/


int nullinteract (int what, FILE *controltty, char *string);
/*<  All purpose Do-nothing generic subroutine >*/


void nullvector(int x1, int y1, int x2, int y2, int nfat, int vpdashon);
/*<  All purpose Do-nothing generic subroutine >*/


void nullplot(int x, int y, int draw);
/*<  All purpose Do-nothing generic subroutine >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_polyfix_h
#define _pen_polyfix_h


void polyfix (int x, int y, int *first);
/*< Read in the data for polystart >*/


void polystart (void);
/*< Start working on the polygons >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_polysubs_h
#define _pen_polysubs_h


void xminclip (int xin, int yin, int *first);
/*< Do a simple-minded polygon clipping. If it goes out, draw it to where it
 * crossed the edge. When it comes back in, draw it from where it hit the
 * edge. This is complicated if you have to deal with several edges, but
 * very easy for one edge. So, since I'm lazy, I did it four times, each
 * routine reading in points, clipping, and sending the output on for
 * further clipping. Finally, it sends it on to polyfix which does
 * complicated processing. JAD 5-11-84 >*/

#endif
/* This file is automatically generated. DO NOT EDIT! */

#ifndef _pen_vecarea_h
#define _pen_vecarea_h


void vecarea (int npts, struct vertex  *head);
/*< device-independent area >*/

#endif
