/* This file is automatically generated. DO NOT EDIT! */

#ifndef _vp_vplot_h
#define _vp_vplot_h


#define VP_SCREEN_RATIO 0.75 
/* aspect ratio, default window */
#define VP_ROTATED_HEIGHT 7.5
/* height in inches, rotated */    
#define VP_STANDARD_HEIGHT 10.24
/* height in inches, default device */ 
#define VP_MAX 54.6           
/* absolute maximum x or y in inches */
#define VP_BSIZE 256
/* number of pixels for scalebars */


enum {
    RPERIN=600,         /* vplot units per inch */
    HATCHPERIN=100,	/* Hatch units per inch */
    TXPERIN=33,	        /* Text units per inch */
    FATPERIN=200,	/* Fatness units per inch */
    MAX_GUN=255,	/* Maximum color gun strength */
    /*
     * This is the factor we scale our path and up vectors by before
     * running them through the local text coordinate transformation.
     * (The coordinate transformation, being in terms of device units,
     * gets done in integers. If we don't scale up we get severe roundoff
     * problems for small text sizes at odd angles. We can't make this
     * factor too big, though, or we risk very large text overflowing
     * the maximum possible integer.)
     */
    TEXTVECSCALE=10
};


enum {PEN, ROMANS, ROMAND, ROMANC, ROMANT, ITALICC, ITALICT, 
      SCRIPTS, SCRIPTC, GREEKS, GREEKC, CYRILC, GOTHGBT, GOTHGRT, GOTHITT,
      MATH, MISC};


enum {
    TH_NORMAL, /* Use the default */
    TH_LEFT,   /* Left justify */
    TH_CENTER, /* Center */
    TH_RIGHT,  /* Right justify */
    TH_SYMBOL  /* Position the character for use as a marking point */
};
enum {
    TV_NORMAL, /* Use the default */
    TV_BOTTOM, /* Bottom of writing area */
    TV_BASE,   /* Bottom of capital letters */
    TV_HALF,   /* Centered */
    TV_CAP,    /* Top of capital letters */
    TV_TOP,    /* Top of writing area */
    TV_SYMBOL  /* Position the character for use as a marking point */
};


enum {
    VP_SETSTYLE         = 'S',
    VP_MOVE             = 'm',
    VP_DRAW	        = 'd',
    VP_PLINE	    	= 'L',
    VP_PMARK	   	= 'M',
    VP_TEXT		= 'T',
    VP_GTEXT		= 'G',
    VP_AREA		= 'A',
    VP_OLDAREA		= 'a',
    VP_BYTE_RASTER	= 'R',
    VP_BIT_RASTER	= 'r',    
    VP_ERASE		= 'e',
    VP_BREAK		= 'b',
    VP_PURGE		= 'p',
    VP_NOOP		= 'n',    
    VP_ORIGIN		= 'o',
    VP_WINDOW		= 'w',    
    VP_FAT		= 'f',
    VP_SETDASH		= 's',
    VP_COLOR		= 'c',
    VP_SET_COLOR_TABLE	= 'C',
    VP_TXALIGN		= 'J',
    VP_TXFONTPREC	= 'F',
    VP_PATLOAD		= 'l',
    VP_OVERLAY		= 'v',    
    VP_MESSAGE		= 'z',
    VP_BEGIN_GROUP	= '[',
    VP_END_GROUP	= ']',    
    VP_OLDTEXT		= 't',
    VP_BACKGROUND       = 'E'
};


typedef enum {
    VP_NO_STYLE_YET=-1,
    VP_STANDARD, /* Origin in lower left, scaled so that the maximum Y	value
		    (top of  the  screen)  is VP_STANDARD_HEIGHT */
    VP_ROTATED, /* Origin in upper left, Y-axis horizontal increasing
		   to the right, X-axis vertical and increasing down,
		   scaled so that the maximum X value (bottom of  the
		   screen)  is VP_ROTATED_HEIGHT.  Use is discouraged */
    VP_OLD,
    VP_ABSOLUTE /* Origin  in  lower left, plotted in physical inches
		   on the device */
} vp_plotstyle;


enum {
    VP_BLACK,
    VP_BLUE,
    VP_RED,
    VP_PURPLE,
    VP_GREEN,
    VP_CYAN,
    VP_YELLOW,
    VP_WHITE
};


enum {
    VP_NO_CHANGE=-1, /* Use the previous value. */
    VP_STRING,       /* Use the hardware  text  capabilities  to
			write the whole string. */
    VP_CHAR,         /* Use hardware  characters,	but  position
			them individually. */
    VP_STROKE        /* Software text. */
};


enum {
    OVLY_NORMAL,    /* draw the text over */
    OVLY_BOX,       /* draw a box around the text */
    OVLY_SHADE,     /* clear a box under the text */
    OVLY_SHADE_BOX  /* box the text and clear under it */
};    
/* text overlay */


void vp_filep(FILE *file);
/*< set the output file >*/


void vp_init(void);
/*< Initialize output to vplot >*/


int vp_getint (void);
/*< Extract and decode an integer >*/


void vp_putint (int w);
/*< Output an encoded integer >*/


void vp_putfloat (float w);
/*< Output an encoded float with scaling >*/


void vp_putfloat0 (float w);
/*< Output an encoded float without scaling >*/


void vp_egroup (void);
/*< end group >*/


void vp_erase (void);
/*< erase screen >*/


void vp_background (void);
/*< erase screen to the background color  >*/


void vp_fat (int f);
/*< set line width >*/


void vp_fill (const float *xp /* [np] */, 
	      const float *yp /* [np] */, 
	      int  np         /* number of points */);
/*< fill polygon >*/


void vp_ufill (const float *xp /* [np] */, 
	       const float *yp /* [np] */, 
	       int  np         /* number of points */);
/*< fill polygon defined in user coordinates >*/


void vp_area (const float *xp, const float *yp /* points [np] */,
	      int np                           /* number of points */,
	      int fat                          /* fatness of the border line */, 
	      int xmask, int ymask             /* rectangles for filling
						  (1,1 - solid fill;
						  1,2 - horizontal lines;
						  0,1 - not filled;
						  4,4 - gray color) */);
/*< Fill the aread (old-style polygon) >*/


void vp_uarea (const float *xp, const float *yp, int np, 
	       int fat, int xmask, int ymask);
/*< old-style polygon defined in user coordinates >*/


void vp_coltab (int color /* color index */, 
		float r   /* red */, 
		float g   /* green */, 
		float b   /* blue */);
/*< set a color table entry >*/


void vp_gtext (float x, float y         /* reference point */, 
	       float xpath, float ypath /* vector pointing for the string */,
	       float xup, float yup     /* vector pointing in the ‘‘up’’ 
					   direction  for  individual letters */, 
	       const char *string);
/*< output text string using the currently-defined font, 
  precision,  and text  alignment >*/


void vp_ugtext (float x, float y, 
		float xpath, float ypath,
		float xup, float yup, const char *string);
/*< output text string in user coordinates >*/


void vp_hatchload (int angle  /* line angle */,
		   int nhatch /* number of lines */, 
		   int ihatch /* pattern number */, 
		   int *hatch /* [2 * 4 * nhatch]  for each  set  of	lines
				 (nhatch * 2) contains 4 elements for
				 ‘fatness’, ‘color’, ‘offset’, ‘repeat interval’ */);
/*< Load a hatch pattern  >*/


void vp_message (const char *string);
/*< output message >*/


void vp_move (float x,float  y);
/*< move to a point >*/


void vp_umove (float x,float  y);
/*< move to a point in user coordinates >*/


void vp_orig (float x,float  y);
/*< set the origin >*/


void vp_uorig (float x,float  y);
/*< set the origin in user coordinates >*/


void vp_patload (int ppi          /* pixels per inch */, 
		 int  nx, int ny  /* dimensions */,
		 int ipat         /* pattern number */, 
		 int *col         /* [nx * ny] pattern (color table numbers) */);
/*<Load a raster pattern  >*/


void vp_pendn (float x, float y);
/*< go to location (x,y) and then put the pen down >*/


void vp_upendn (float x, float y);
/*< go to location (x,y) in user coordinates and then put the pen down >*/


void vp_penup (void);
/*< put pen up >*/


void vp_pline (const float *xp /* [np] */, 
	       const float *yp /* [np] */, 
	       int np          /* number of points */);
/*< draw a line >*/


void vp_upline (const float *xp /* [np] */, 
		const float *yp /* [np] */, 
		int np          /* number of points */);
/*< draw a line in user coordinates >*/


void vp_plot (float x, float y, bool  down);
/*< line drawing >*/


void vp_uplot (float x, float y, bool down);
/*< line drawing in user coordinates >*/


void vp_draw (float x,float  y);
/*< line drawing step >*/


void vp_udraw (float x,float  y);
/*< line drawing step in user coordinates >*/


void vp_pmark (int npts, int mtype, int msize, 
	       const float *xp, const float *yp);
/*< Plot polymarkers >*/


void vp_purge (void);
/*< Flush the output >*/


void vp_rascoltab (int nreserve, const char *colname);
/*< set a raster color table >*/


void vp_raster (unsigned char **array, 
		bool bit               /* one bit/byte per pixel */, 
		int offset             /* add offset for bytes */, 
		int xpix, int ypix     /* number of pixels */, 
		float xll, float yll, 
		float xur,float yur    /* display coordinates */, int orient);
/*< Output a raster array >*/


void vp_uraster (unsigned char **array, bool bit, int offset,
		 int xpix, int ypix, 
		 float xll, float yll, float xur, float yur, int orient);
/*< Output a raster array in user coordinates >*/


void vp_scale (float xscale, float  yscale);
/*< set scaling >*/


void vp_stretch (float xmin, float ymin, float xmax, float ymax);
/*< set scale and origin for a rectangular area >*/


void vp_style (vp_plotstyle st);
/*< set vpplot style >*/


void vp_text (float x, float y    /* coordinate of the reference point */, 
	      int size            /* height of character */, 
	      int orient          /* text drawing direction ( in degrees counter-clockwise
				     from horizontal, right-facing) */, 
	      const char *string /* test */);
/*< output text string >*/


void vp_utext (float x, float y, int size, int orient, const char *string);
/*< output text string in user coordinates >*/


void vp_tfont (int font1 /* which font to use */, 
	       int prec1 /* font precision */, 
	       int ovly1 /* overlay mode */);
/*< set text font >*/


void vp_tjust (int xjust1, int yjust1);
/*< set text alignment >*/


void vp_clip (float xmin, float ymin, float xmax, float ymax);
/*< set rectangular clip >*/


void vp_uclip (float xmin, float ymin, float xmax, float ymax);
/*< set rectangular clip in user coordinates >*/


void vp_where (float *x, float *y);
/*< output current pen location >*/


void vp_color (int col);
/*< set drawing color >*/


void vp_arrow (float x1, float y1 /* starting point */, 
	       float x, float y   /* end point */, 
	       float r            /* arrow size */);
/*< plot an arrow >*/


void vp_uarrow (float x1, float y1, float x, float y, float r);
/*< plot an arrow in user coordinates >*/


void vp_dash (float dash1, float gap1, float dash2, float gap2);
/*< set dash pattern >*/


void vp_setdash (const float *dash, const float *gapp, int np);
/*< set dash pattern >*/


void vp_bgroup(const char *string /* group name */);
/*< begin group >*/


void vp_break(void);
/*< Interrupt the output processing >*/

#endif
