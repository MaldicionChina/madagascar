sfinvrec1 = rsf.doc.rsfprog('sfinvrec1','user/gee/Minvrec1.c','''1-D inverse interpolation with recursive filtering. ''')
sfinvrec1.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvrec1.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvrec1.par('nx',rsf.doc.rsfpar('int','','','''number of bins '''))
sfinvrec1.par('xmin',rsf.doc.rsfpar('float','','','''grid size '''))
sfinvrec1.par('xmax',rsf.doc.rsfpar('float','','',''''''))
sfinvrec1.par('x0',rsf.doc.rsfpar('float','xmin','','''grid origin '''))
sfinvrec1.par('dx',rsf.doc.rsfpar('float','','','''grid sampling '''))
sfinvrec1.par('spline',rsf.doc.rsfpar('bool','n','','''if use spline interpolation '''))
sfinvrec1.par('nw',rsf.doc.rsfpar('int','2','','''interpolator size '''))
sfinvrec1.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinvrec1.par('niter',rsf.doc.rsfpar('int','nx','','''number of conjugate-gradient iterations '''))
sfinvrec1.par('eps',rsf.doc.rsfpar('float','0.2','','''regularization parameter '''))
sfinvrec1.par('movie',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinvrec1.par('head',rsf.doc.rsfpar('string ',desc=''''''))
sfinvrec1.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags (auxiliary input file name)'''))
sfinvrec1.version('1.7 Minvbin1.c 2521 2007-02-02 00:25:42Z sfomel')
sfinvrec1.synopsis('''sfinvrec1 < in.rsf > out.rsf filt=filt.rsf lag=lag.rsf nx= xmin= xmax= x0=xmin dx= spline=n nw=2 verb=n niter=nx eps=0.2 movie=n head=''','''''')
rsf.doc.progs['sfinvrec1']=sfinvrec1

