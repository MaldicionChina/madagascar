import rsf.doc

sfdealias = rsf.doc.rsfprog('sfdealias','user/pwd/Mdealias.c','''3-D trace interpolation to a denser grid using PWD.''')
sfdealias.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdealias.par('both',rsf.doc.rsfpar('bool','n','','''if use left and right slopes '''))
sfdealias.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfdealias.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdealias.version('1.7 Mdealias2.c 1713 2006-03-03 08:21:29Z fomels')
sfdealias.synopsis('''sfdealias < in.rsf > out.rsf dip=dip.rsf both=n eps=0.01 order=1''','''
It may be necessary to bandpass the data before and after dealiasing 
to ensure that the temporal spectrum is banded. Rule of thumb: if 
max(jx,jy)=N, the temporal bandwidth should be 1/N of Nyquist.
''')
rsf.doc.progs['sfdealias']=sfdealias

sfdijkstra = rsf.doc.rsfprog('sfdijkstra','user/pwd/Mdijkstra.c','''Dijkstra shortest-path algorithm in 2-D ''')
sfdijkstra.par('fin1',rsf.doc.rsfpar('ints','','',''' [nf]'''))
sfdijkstra.par('fin2',rsf.doc.rsfpar('ints','','','''final points  [nf]'''))
sfdijkstra.par('paths',rsf.doc.rsfpar('strings','','',''' [nf]'''))
sfdijkstra.par('ref1',rsf.doc.rsfpar('int','0','',''''''))
sfdijkstra.par('ref2',rsf.doc.rsfpar('int','0','','''source point '''))
sfdijkstra.par('nf',rsf.doc.rsfpar('int','0','','''number of final points '''))
sfdijkstra.version('1.7')
sfdijkstra.synopsis('''sfdijkstra < cost.rsf > out.rsf fin1= fin2= paths= ref1=0 ref2=0 nf=0''','''''')
rsf.doc.progs['sfdijkstra']=sfdijkstra

sfdip = rsf.doc.rsfprog('sfdip','user/pwd/Mdip.c','''3-D dip estimation by plane wave destruction. ''')
sfdip.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdip.par('idip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdip.par('xdip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdip.par('both',rsf.doc.rsfpar('bool','n','','''if y, compute both left and right predictions '''))
sfdip.par('n4',rsf.doc.rsfpar('int','2','','''what to compute in 3-D. 0: in-line, 1: cross-line, 2: both '''))
sfdip.par('niter',rsf.doc.rsfpar('int','5','','''number of iterations '''))
sfdip.par('liter',rsf.doc.rsfpar('int','20','','''number of linear iterations '''))
sfdip.par('rect1',rsf.doc.rsfpar('int','1','','''dip smoothness on 1st axis '''))
sfdip.par('rect2',rsf.doc.rsfpar('int','1','','''dip smoothness on 2nd axis '''))
sfdip.par('rect3',rsf.doc.rsfpar('int','1','','''dip smoothness on 3rd axuis '''))
sfdip.par('p0',rsf.doc.rsfpar('float','0.','','''initial in-line dip '''))
sfdip.par('q0',rsf.doc.rsfpar('float','0.','','''initial cross-line dip '''))
sfdip.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdip.par('nj1',rsf.doc.rsfpar('int','1','','''in-line antialiasing '''))
sfdip.par('nj2',rsf.doc.rsfpar('int','1','','''cross-line antialiasing '''))
sfdip.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfdip.par('pmin',rsf.doc.rsfpar('float','-FLT_MAX','','''minimum inline dip '''))
sfdip.par('pmax',rsf.doc.rsfpar('float','+FLT_MAX','','''maximum inline dip '''))
sfdip.par('qmin',rsf.doc.rsfpar('float','-FLT_MAX','','''minimum cross-line dip '''))
sfdip.par('qmax',rsf.doc.rsfpar('float','+FLT_MAX','','''maximum cross-line dip '''))
sfdip.par('eps',rsf.doc.rsfpar('float','0.0f','','''regularization '''))
sfdip.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdip.par('idip',rsf.doc.rsfpar('string ',desc='''initial in-line dip (auxiliary input file name)'''))
sfdip.par('xdip',rsf.doc.rsfpar('string ',desc='''initial cross-line dip (auxiliary input file name)'''))
sfdip.version('1.7 Mdip.c 11132 2013-10-20 18:40:59Z sfomel')
sfdip.synopsis('''sfdip < in.rsf > out.rsf mask=mask.rsf idip=idip0.rsf xdip=xdip0.rsf both=n n4=2 niter=5 liter=20 rect1=1 rect2=1 rect3=1 p0=0. q0=0. order=1 nj1=1 nj2=1 verb=n pmin=-FLT_MAX pmax=+FLT_MAX qmin=-FLT_MAX qmax=+FLT_MAX eps=0.0f''','''
The output is dimensionless (stepout in time measured in time samples). 

June 2012 program of the month:
http://ahay.org/rsflog/index.php?/archives/295-Program-of-the-month-sfdip.html
''')
rsf.doc.progs['sfdip']=sfdip

sfdip2 = rsf.doc.rsfprog('sfdip2','user/pwd/Mdip2.c','''2-D dip estimation by plane wave destruction. ''')
sfdip2.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdip2.par('idip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdip2.par('niter',rsf.doc.rsfpar('int','5','','''number of iterations '''))
sfdip2.par('liter',rsf.doc.rsfpar('int','20','','''number of linear iterations '''))
sfdip2.par('rect1',rsf.doc.rsfpar('int','1','','''dip smoothness on 1st axis '''))
sfdip2.par('rect2',rsf.doc.rsfpar('int','1','','''dip smoothness on 2nd axis '''))
sfdip2.par('p0',rsf.doc.rsfpar('float','0.','','''initial dip '''))
sfdip2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdip2.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing '''))
sfdip2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfdip2.par('pmin',rsf.doc.rsfpar('float','-FLT_MAX','','''minimum dip '''))
sfdip2.par('pmax',rsf.doc.rsfpar('float','+FLT_MAX','','''maximum dip '''))
sfdip2.par('eps',rsf.doc.rsfpar('float','0.0f','','''regularization '''))
sfdip2.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdip2.par('idip',rsf.doc.rsfpar('string ',desc='''initial in-line dip (auxiliary input file name)'''))
sfdip2.version('1.7 Mdip2.c 11132 2013-10-20 18:40:59Z sfomel')
sfdip2.synopsis('''sfdip2 < in.rsf > out.rsf mask=mask.rsf idip=idip0.rsf niter=5 liter=20 rect1=1 rect2=1 p0=0. order=1 nj1=1 verb=n pmin=-FLT_MAX pmax=+FLT_MAX eps=0.0f''','''''')
rsf.doc.progs['sfdip2']=sfdip2

sfdiplet = rsf.doc.rsfprog('sfdiplet','user/pwd/Mdiplet.c','''2-D Seislet frame ''')
sfdiplet.par('dips',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdiplet.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdiplet.par('inv',rsf.doc.rsfpar('bool','n','','''if y, do inverse transform '''))
sfdiplet.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfdiplet.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfdiplet.par('twhole',rsf.doc.rsfpar('bool','y','','''threshold flag, if y, whole model, otherwise, each component '''))
sfdiplet.par('decomp',rsf.doc.rsfpar('bool','n','','''do decomposition '''))
sfdiplet.par('ncycle',rsf.doc.rsfpar('int','0','','''number of iterations '''))
sfdiplet.par('niter',rsf.doc.rsfpar('int','1','','''number of Bregman iterations '''))
sfdiplet.par('perc',rsf.doc.rsfpar('float','50.0','','''percentage for sharpening '''))
sfdiplet.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdiplet.par('mask',rsf.doc.rsfpar('string ',desc='''(optional) data mask file (auxiliary input file name)'''))
sfdiplet.par('type',rsf.doc.rsfpar('string ',desc='''wavelet type (haar,linear,biorthogonal), default is linear '''))
sfdiplet.version('1.7')
sfdiplet.synopsis('''sfdiplet < in.rsf > out.rsf dips=dip.rsf mask=mask.rsf inv=n eps=0.01 verb=y twhole=y decomp=n ncycle=0 niter=1 perc=50.0 order=1 type=''','''''')
rsf.doc.progs['sfdiplet']=sfdiplet

sfdixshape = rsf.doc.rsfprog('sfdixshape','user/pwd/Mdixshape.c','''Convert RMS to interval velocity using LS and shaping regularization.''')
sfdixshape.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdixshape.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdixshape.par('vrmsout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdixshape.par('rect1',rsf.doc.rsfpar('int','3','',''''''))
sfdixshape.par('rect2',rsf.doc.rsfpar('int','3','','''smoothing radius '''))
sfdixshape.par('lam',rsf.doc.rsfpar('float','1.','','''operator scaling for inversion '''))
sfdixshape.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdixshape.par('niter',rsf.doc.rsfpar('int','100','','''maximum number of iterations '''))
sfdixshape.par('vrmsout',rsf.doc.rsfpar('string ',desc='''optionally, output predicted vrms (auxiliary output file name)'''))
sfdixshape.version('1.7 Mdix.c 1131 2005-04-20 18:19:10Z fomels')
sfdixshape.synopsis('''sfdixshape < vrms.rsf > vint.rsf weight=weight.rsf dip=dip.rsf vrmsout=vout.rsf rect1=3 rect2=3 lam=1. order=1 niter=100 rect1= rect2= ...''','''rectN defines the size of the smoothing stencil in N-th dimension.
''')
rsf.doc.progs['sfdixshape']=sfdixshape

sfexplanesignoi = rsf.doc.rsfprog('sfexplanesignoi','user/pwd/Mexplanesignoi.c','''Signal and noise separation using both frequency components and dips. ''')
sfexplanesignoi.par('freq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfexplanesignoi.par('ndip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfexplanesignoi.par('sdip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfexplanesignoi.par('niter',rsf.doc.rsfpar('int','50','','''maximum number of iterations '''))
sfexplanesignoi.par('eps',rsf.doc.rsfpar('float','1.','','''regularization parameter '''))
sfexplanesignoi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfexplanesignoi.par('order',rsf.doc.rsfpar('int','1','[1,2,3]','''accuracy order '''))
sfexplanesignoi.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing for first dip '''))
sfexplanesignoi.par('nj2',rsf.doc.rsfpar('int','1','','''antialiasing for second dip '''))
sfexplanesignoi.version('1.7')
sfexplanesignoi.synopsis('''sfexplanesignoi < in.rsf freq=freq.rsf ndip=ndip.rsf sdip=sdip.rsf > out.rsf niter=50 eps=1. verb=n order=1 nj1=1 nj2=1''',''' ''')
rsf.doc.progs['sfexplanesignoi']=sfexplanesignoi

sfexpsignoi = rsf.doc.rsfprog('sfexpsignoi','user/pwd/Mexpsignoi.c','''Signal and noise separation using frequency components. ''')
sfexpsignoi.par('freq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfexpsignoi.par('niter',rsf.doc.rsfpar('int','50','','''maximum number of iterations '''))
sfexpsignoi.par('eps',rsf.doc.rsfpar('float','1.','','''regularization parameter '''))
sfexpsignoi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfexpsignoi.version('1.7')
sfexpsignoi.synopsis('''sfexpsignoi < in.rsf freq=freq.rsf > out.rsf niter=50 eps=1. verb=n''',''' ''')
rsf.doc.progs['sfexpsignoi']=sfexpsignoi

sffdip = rsf.doc.rsfprog('sffdip','user/pwd/Mfdip.c','''3D fast dip estimation by plane wave destruction ''')
sffdip.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffdip.par('n4',rsf.doc.rsfpar('int','2','','''what to compute in 3-D. 0: in-line, 1: cross-line, 2: both '''))
sffdip.par('liter',rsf.doc.rsfpar('int','20','','''number of linear iterations '''))
sffdip.par('rect1',rsf.doc.rsfpar('int','1','','''dip smoothness on 1st axis '''))
sffdip.par('rect2',rsf.doc.rsfpar('int','1','','''dip smoothness on 2nd axis '''))
sffdip.par('rect3',rsf.doc.rsfpar('int','1','','''dip smoothness on 3rd axuis '''))
sffdip.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sffdip.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffdip.version('1.7')
sffdip.synopsis('''sffdip < in.rsf > out.rsf mask=mask.rsf n4=2 liter=20 rect1=1 rect2=1 rect3=1 verb=n''','''''')
rsf.doc.progs['sffdip']=sffdip

sfplanemis2 = rsf.doc.rsfprog('sfplanemis2','user/pwd/Mplanemis2.c','''Missing data interpolation in 2-D using plane-wave destruction. ''')
sfplanemis2.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanemis2.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanemis2.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfplanemis2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfplanemis2.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing for first dip '''))
sfplanemis2.par('nj2',rsf.doc.rsfpar('int','1','','''antialiasing for second dip '''))
sfplanemis2.par('prec',rsf.doc.rsfpar('bool','n','','''if y, apply preconditioning '''))
sfplanemis2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfplanemis2.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfplanemis2.version('1.7')
sfplanemis2.synopsis('''sfplanemis2 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100 order=1 nj1=1 nj2=1 prec=n verb=n''','''''')
rsf.doc.progs['sfplanemis2']=sfplanemis2

sfplanemis3 = rsf.doc.rsfprog('sfplanemis3','user/pwd/Mplanemis3.c','''Missing data interpolation in 3-D using plane-wave destruction. ''')
sfplanemis3.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanemis3.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanemis3.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfplanemis3.par('order',rsf.doc.rsfpar('int','1','[1,2,3]','''accuracy order '''))
sfplanemis3.par('nj1',rsf.doc.rsfpar('int','1','',''''''))
sfplanemis3.par('nj2',rsf.doc.rsfpar('int','1','','''antialiasing '''))
sfplanemis3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfplanemis3.par('seed',rsf.doc.rsfpar('int','time(NULL)','','''random seed '''))
sfplanemis3.par('var',rsf.doc.rsfpar('float','0.','','''noise variance '''))
sfplanemis3.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfplanemis3.version('1.7')
sfplanemis3.synopsis('''sfplanemis3 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100 order=1 nj1=1 nj2=1 verb=n seed=time(NULL) var=0.''','''''')
rsf.doc.progs['sfplanemis3']=sfplanemis3

sfplanesignoi = rsf.doc.rsfprog('sfplanesignoi','user/pwd/Mplanesignoi.c','''Signal and noise separation using plane-wave destruction filters.  ''')
sfplanesignoi.par('ndip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanesignoi.par('sdip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfplanesignoi.par('niter',rsf.doc.rsfpar('int','50','','''maximum number of iterations '''))
sfplanesignoi.par('eps',rsf.doc.rsfpar('float','1.','','''regularization parameter '''))
sfplanesignoi.par('order',rsf.doc.rsfpar('int','1','[1,2,3]','''accuracy order '''))
sfplanesignoi.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing for noise dip '''))
sfplanesignoi.par('nj2',rsf.doc.rsfpar('int','1','','''antialiasing for signal dip '''))
sfplanesignoi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfplanesignoi.version('1.7')
sfplanesignoi.synopsis('''sfplanesignoi < in.rsf ndip=ndip.rsf sdip=sdip.rsf > out.rsf niter=50 eps=1. order=1 nj1=1 nj2=1 verb=n''','''
If n3=1 in the output, outputs both signal and noise. Otherwise, only signal.
''')
rsf.doc.progs['sfplanesignoi']=sfplanesignoi

sfpmshape2 = rsf.doc.rsfprog('sfpmshape2','user/pwd/Mpmshape2.c','''Missing data interpolation in 2-D using plane-wave destruction and shaping regularization. ''')
sfpmshape2.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpmshape2.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpmshape2.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfpmshape2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpmshape2.par('rect1',rsf.doc.rsfpar('int','3','',''''''))
sfpmshape2.par('rect2',rsf.doc.rsfpar('int','3','','''smoothing radius '''))
sfpmshape2.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpmshape2.version('1.7')
sfpmshape2.synopsis('''sfpmshape2 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100 order=1 rect1=3 rect2=3''','''''')
rsf.doc.progs['sfpmshape2']=sfpmshape2

sfpredict = rsf.doc.rsfprog('sfpredict','user/pwd/Mpredict.c','''2-D plane-wave prediction. ''')
sfpredict.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpredict.par('adj',rsf.doc.rsfpar('bool','n','',''''''))
sfpredict.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpredict.version('1.7 Mtrismooth2.c 752 2004-08-22 21:57:40Z fomels')
sfpredict.synopsis('''sfpredict < in.rsf dip=dip.rsf > out.rsf adj=n order=1''','''''')
rsf.doc.progs['sfpredict']=sfpredict

sfpwcoh = rsf.doc.rsfprog('sfpwcoh','user/pwd/Mpwcoh.c','''Coherency by plane-wave construction. ''')
sfpwcoh.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwcoh.par('a2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpwcoh.par('b2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpwcoh.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfpwcoh.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwcoh.par('rect',rsf.doc.rsfpar('int','2','','''spread '''))
sfpwcoh.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwcoh.version('1.7 Mflat.c 1131 2005-04-20 18:19:10Z fomels')
sfpwcoh.synopsis('''sfpwcoh < in.rsf > out.rsf dip=dip.rsf a2=a2.rsf b2=b2.rsf verb=n eps=0.01 rect=2 order=1''','''''')
rsf.doc.progs['sfpwcoh']=sfpwcoh

sfpwd = rsf.doc.rsfprog('sfpwd','user/pwd/Mpwd.c','''3-D plane wave destruction. ''')
sfpwd.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwd.par('both',rsf.doc.rsfpar('bool','n','','''if y, compute both left and right predictions '''))
sfpwd.par('n4',rsf.doc.rsfpar('int','2','','''what to compute in 3-D. 0: in-line, 1: cross-line, 2: both '''))
sfpwd.par('order',rsf.doc.rsfpar('int','1','','''accuracy '''))
sfpwd.par('nj1',rsf.doc.rsfpar('int','1','','''in-line aliasing '''))
sfpwd.par('nj2',rsf.doc.rsfpar('int','1','','''cross-line aliasing '''))
sfpwd.version('1.7 Mpwd.c 10160 2013-04-10 20:11:15Z sfomel')
sfpwd.synopsis('''sfpwd < in.rsf dip=dip.rsf > out.rsf both=n n4=2 order=1 nj1=1 nj2=1''','''
February 2013 program of the month:
http://www.ahay.org/rsflog/index.php?/archives/321-Program-of-the-month-sfpwd.html
''')
rsf.doc.progs['sfpwd']=sfpwd

sfpwdsigk = rsf.doc.rsfprog('sfpwdsigk','user/pwd/Mpwdsigk.c','''Signal component separation using plane-wave destruction. ''')
sfpwdsigk.par('dips',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwdsigk.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpwdsigk.par('niter',rsf.doc.rsfpar('int','50','','''maximum number of iterations '''))
sfpwdsigk.par('nliter',rsf.doc.rsfpar('int','1','','''number of reweighting iterations '''))
sfpwdsigk.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfpwdsigk.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpwdsigk.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwdsigk.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfpwdsigk.version('1.7')
sfpwdsigk.synopsis('''sfpwdsigk < in.rsf dips=dips.rsf > out.rsf weight=weight.rsf niter=50 nliter=1 eps=0. verb=n order=1''','''
The program works with 2-D data.
''')
rsf.doc.progs['sfpwdsigk']=sfpwdsigk

sfpwdsmooth2 = rsf.doc.rsfprog('sfpwdsmooth2','user/pwd/Mpwdsmooth2.c','''2-D smoothing by triangle plane-wave construction shaping. ''')
sfpwdsmooth2.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwdsmooth2.par('rect1',rsf.doc.rsfpar('int','3','',''''''))
sfpwdsmooth2.par('rect2',rsf.doc.rsfpar('int','3','','''smoothing radius '''))
sfpwdsmooth2.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfpwdsmooth2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpwdsmooth2.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwdsmooth2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwdsmooth2.version('1.7')
sfpwdsmooth2.synopsis('''sfpwdsmooth2 < in.rsf dip=dip.rsf > out.rsf rect1=3 rect2=3 adj=n verb=n eps=0.01 order=1''','''''')
rsf.doc.progs['sfpwdsmooth2']=sfpwdsmooth2

sfpwpaint = rsf.doc.rsfprog('sfpwpaint','user/pwd/Mpwpaint.c','''Painting by plane-wave construction. ''')
sfpwpaint.par('seed',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwpaint.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfpwpaint.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwpaint.par('i0',rsf.doc.rsfpar('int','0','','''reference trace '''))
sfpwpaint.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwpaint.par('seed',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpwpaint.version('1.7 Mflat.c 1131 2005-04-20 18:19:10Z fomels')
sfpwpaint.synopsis('''sfpwpaint < dip.rsf > out.rsf seed=seed.rsf verb=n eps=0.01 i0=0 order=1''','''''')
rsf.doc.progs['sfpwpaint']=sfpwpaint

sfpwpaint2 = rsf.doc.rsfprog('sfpwpaint2','user/pwd/Mpwpaint2.c','''3-D painting by plane-wave construction. ''')
sfpwpaint2.par('cost',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwpaint2.par('seed',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwpaint2.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfpwpaint2.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwpaint2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwpaint2.par('seed',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpwpaint2.version('1.7')
sfpwpaint2.synopsis('''sfpwpaint2 < dip.rsf > out.rsf cost=cost.rsf seed=seed.rsf verb=n eps=0.01 order=1''','''''')
rsf.doc.progs['sfpwpaint2']=sfpwpaint2

sfpwpaint3 = rsf.doc.rsfprog('sfpwpaint3','user/pwd/Mpwpaint3.c','''3-D painting by plane-wave construction. ''')
sfpwpaint3.par('seed',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwpaint3.par('cost',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwpaint3.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfpwpaint3.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwpaint3.par('ref2',rsf.doc.rsfpar('int','0','',''''''))
sfpwpaint3.par('ref3',rsf.doc.rsfpar('int','0','','''reference trace '''))
sfpwpaint3.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwpaint3.version('1.7 Mflat.c 743 2004-08-16 20:41:00Z fomels')
sfpwpaint3.synopsis('''sfpwpaint3 < dip.rsf > out.rsf seed=seed.rsf cost=cost.rsf verb=n eps=0.01 ref2=0 ref3=0 order=1''','''''')
rsf.doc.progs['sfpwpaint3']=sfpwpaint3

sfpwsmooth = rsf.doc.rsfprog('sfpwsmooth','user/pwd/Mpwsmooth.c','''2-D structure-enhancing filtering. ''')
sfpwsmooth.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwsmooth.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpwsmooth.par('ns',rsf.doc.rsfpar('int','0','','''smoothing radius '''))
sfpwsmooth.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfpwsmooth.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwsmooth.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwsmooth.version('1.7')
sfpwsmooth.synopsis('''sfpwsmooth < in.rsf dip=dip.rsf > out.rsf verb=n ns=0 adj=n eps=0.01 order=1''','''''')
rsf.doc.progs['sfpwsmooth']=sfpwsmooth

sfpwspray = rsf.doc.rsfprog('sfpwspray','user/pwd/Mpwspray.c','''Plane-wave spray. ''')
sfpwspray.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwspray.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpwspray.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwspray.par('ns',rsf.doc.rsfpar('int','','','''spray radius '''))
sfpwspray.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwspray.par('rect',rsf.doc.rsfpar('int','2','','''radius for predictive coherence (reduce=coherence) '''))
sfpwspray.par('reduce',rsf.doc.rsfpar('string ',desc='''reduction method (none,stack,median,triangle,gaussian,predict,coherence) '''))
sfpwspray.version('1.7')
sfpwspray.synopsis('''sfpwspray < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 ns= order=1 rect=2 reduce=''','''''')
rsf.doc.progs['sfpwspray']=sfpwspray

sfpwspray2 = rsf.doc.rsfprog('sfpwspray2','user/pwd/Mpwspray2.c','''Plane-wave spray in 3-D. ''')
sfpwspray2.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwspray2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpwspray2.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwspray2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwspray2.par('ns2',rsf.doc.rsfpar('int','','',''''''))
sfpwspray2.par('ns3',rsf.doc.rsfpar('int','','','''spray radius '''))
sfpwspray2.version('1.7')
sfpwspray2.synopsis('''sfpwspray2 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 order=1 ns2= ns3=''','''''')
rsf.doc.progs['sfpwspray2']=sfpwspray2

sfpwspray3 = rsf.doc.rsfprog('sfpwspray3','user/pwd/Mpwspray3.c','''Plane-wave spray in 3-D. ''')
sfpwspray3.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwspray3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpwspray3.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfpwspray3.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfpwspray3.par('ns2',rsf.doc.rsfpar('int','','',''''''))
sfpwspray3.par('ns3',rsf.doc.rsfpar('int','','','''spray radius '''))
sfpwspray3.version('1.7')
sfpwspray3.synopsis('''sfpwspray3 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 order=1 ns2= ns3=''','''''')
rsf.doc.progs['sfpwspray3']=sfpwspray3

sfseisigk = rsf.doc.rsfprog('sfseisigk','user/pwd/Mseisigk.c','''Signal component separation using seislet transforms. ''')
sfseisigk.par('dips',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfseisigk.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfseisigk.par('niter',rsf.doc.rsfpar('int','50','','''maximum number of iterations '''))
sfseisigk.par('nliter',rsf.doc.rsfpar('int','1','','''number of reweighting iterations '''))
sfseisigk.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfseisigk.par('eps0',rsf.doc.rsfpar('float','0.01','','''regularization for seislet '''))
sfseisigk.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfseisigk.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfseisigk.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfseisigk.par('type',rsf.doc.rsfpar('string ',desc='''wavelet type (haar,linear) '''))
sfseisigk.version('1.7')
sfseisigk.synopsis('''sfseisigk < in.rsf dips=dips.rsf > out.rsf weight=weight.rsf niter=50 nliter=1 eps=0. eps0=0.01 verb=n order=1 type=''','''
The program works with 2-D data. The second dimension should be a power of 2.
''')
rsf.doc.progs['sfseisigk']=sfseisigk

sfseislet = rsf.doc.rsfprog('sfseislet','user/pwd/Mseislet.c','''Seislet transform ''')
sfseislet.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfseislet.par('inv',rsf.doc.rsfpar('bool','n','','''if y, do inverse transform '''))
sfseislet.par('adj',rsf.doc.rsfpar('bool','n','','''if y, do adjoint transform '''))
sfseislet.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfseislet.par('unit',rsf.doc.rsfpar('bool','n','','''if y, use unitary scaling '''))
sfseislet.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfseislet.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfseislet.par('type',rsf.doc.rsfpar('string ',desc='''[haar,linear,biorthogonal] wavelet type, the default is linear  '''))
sfseislet.version('1.7')
sfseislet.synopsis('''sfseislet < in.rsf > out.rsf dip=dip.rsf inv=n adj=n eps=0.01 unit=n order=1 verb=n type=''','''''')
rsf.doc.progs['sfseislet']=sfseislet

sftrismooth2 = rsf.doc.rsfprog('sftrismooth2','user/pwd/Mtrismooth2.c','''2-D smoothing by triangle directional shaping. ''')
sftrismooth2.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftrismooth2.par('rect1',rsf.doc.rsfpar('int','3','',''''''))
sftrismooth2.par('rect2',rsf.doc.rsfpar('int','3','','''smoothing radius '''))
sftrismooth2.par('adj',rsf.doc.rsfpar('bool','n','',''''''))
sftrismooth2.version('1.7 Mtrismooth2.c 10160 2013-04-10 20:11:15Z sfomel')
sftrismooth2.synopsis('''sftrismooth2 < in.rsf dip=dip.rsf > out.rsf rect1=3 rect2=3 adj=n''','''''')
rsf.doc.progs['sftrismooth2']=sftrismooth2

sftwodip2 = rsf.doc.rsfprog('sftwodip2','user/pwd/Mtwodip2.c','''2-D two dip estimation by plane wave destruction.''')
sftwodip2.par('dip1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftwodip2.par('dip2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftwodip2.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftwodip2.par('niter',rsf.doc.rsfpar('int','5','','''number of iterations '''))
sftwodip2.par('eps',rsf.doc.rsfpar('float','1','','''vertical smoothness '''))
sftwodip2.par('lam',rsf.doc.rsfpar('float','1','','''horizontal smoothness '''))
sftwodip2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sftwodip2.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing for first dip '''))
sftwodip2.par('nj2',rsf.doc.rsfpar('int','1','','''antialiasing for second dip '''))
sftwodip2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftwodip2.par('sign',rsf.doc.rsfpar('bool','n','','''if y, keep dip sign constant '''))
sftwodip2.par('gauss',rsf.doc.rsfpar('bool','n','','''if y, use exact Gaussian for smoothing '''))
sftwodip2.par('both',rsf.doc.rsfpar('bool','y','','''if y, estimate both dips '''))
sftwodip2.par('p0',rsf.doc.rsfpar('float','1.','','''initial first dip '''))
sftwodip2.par('q0',rsf.doc.rsfpar('float','0.','','''initial second dip '''))
sftwodip2.par('dip1',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftwodip2.par('dip2',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftwodip2.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftwodip2.version('1.7 Mtwodip2.c 10160 2013-04-10 20:11:15Z sfomel')
sftwodip2.synopsis('''sftwodip2 < in.rsf > out.rsf dip1=dip1.rsf dip2=dip2.rsf mask=mask.rsf niter=5 eps=1 lam=1 order=1 nj1=1 nj2=1 verb=n sign=n gauss=n both=y p0=1. q0=0. < data.rsf > dip.rsf''','''''')
rsf.doc.progs['sftwodip2']=sftwodip2

