sfdiplet = rsf.doc.rsfprog('sfdiplet','user/pwd/Mdiplet.c','''2-D Seislet frame ''')
sfdiplet.par('dips',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdiplet.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdiplet.par('inv',rsf.doc.rsfpar('bool','n','','''if y, do inverse transform '''))
sfdiplet.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfdiplet.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfdiplet.par('twhole',rsf.doc.rsfpar('bool','y','','''threshold flag, if y, whole model, otherwise, each component '''))
sfdiplet.par('decomp',rsf.doc.rsfpar('bool','n','','''do decomposition '''))
sfdiplet.par('ncycle',rsf.doc.rsfpar('int','0','','''number of iterations '''))
sfdiplet.par('niter',rsf.doc.rsfpar('int','1','','''number of Bregman iterations '''))
sfdiplet.par('perc',rsf.doc.rsfpar('float','50.0','','''percentage for sharpening '''))
sfdiplet.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfdiplet.par('mask',rsf.doc.rsfpar('string ',desc='''(optional) data mask file (auxiliary input file name)'''))
sfdiplet.par('type',rsf.doc.rsfpar('string ',desc='''wavelet type (haar,linear,biorthogonal), default is linear '''))
sfdiplet.version('1.7')
sfdiplet.synopsis('''sfdiplet < in.rsf > out.rsf dips=dip.rsf mask=mask.rsf inv=n eps=0.01 verb=y twhole=y decomp=n ncycle=0 niter=1 perc=50.0 order=1 type=''','''''')
rsf.doc.progs['sfdiplet']=sfdiplet

