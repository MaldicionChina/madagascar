/* This file is automatically generated. DO NOT EDIT! */

#ifndef _esc_point2_h
#define _esc_point2_h


#ifdef sun
#include <inttypes.h>
#else
#include <stdint.h>
#endif


typedef struct EscPoint2 *sf_esc_point2;
/* abstract data type */


/* Colors for different boundaries */
typedef enum { ESC2_LEFT = 1 << 0, ESC2_RIGHT = 1 << 1,
               ESC2_TOP = 1 << 2, ESC2_BOTTOM = 1 << 3 } EscColor2;
typedef enum { ESC2_AXIS_Z = 0, ESC2_AXIS_X = 1, ESC2_AXIS_A = 2,
               ESC2_DIMS = 3 } EscAxisDim2;
/* Direction along an axis */
typedef enum { ESC2_BACK = 0, ESC2_FORW = 1, ESC2_DIRS = 2 } EscDirection2;
/* Escape variables */
#ifdef ESC_EQ_WITH_L
typedef enum { ESC2_Z = 0, ESC2_X = 1, ESC2_T = 2, ESC2_L = 3,
               ESC2_NUM = 4 } EscType2;
#else
typedef enum { ESC2_Z = 0, ESC2_X = 1, ESC2_T = 2,
               ESC2_NUM = 3 } EscType2;
#endif


extern const char* sf_esc_point2_str[ESC2_NUM];


int sf_esc_point2_sizeof (void);
/*< Returns size of object in bytes >*/


void sf_esc_point2_reset (sf_esc_point2 esc_point);
/*< Reset object to default state >*/


sf_esc_point2 sf_esc_point2_init (void);
/*< Initialize object >*/


void sf_esc_point2_close (sf_esc_point2 esc_point);
/*< Destroy object >*/


float sf_esc_point2_get_esc_var (sf_esc_point2 esc_point, EscType2 i);
/*< Get escape length >*/


EscColor2 sf_esc_point2_get_col (sf_esc_point2 esc_point);
/*< Get point color >*/


void sf_esc_point2_set_esc_var (sf_esc_point2 esc_point, EscType2 i, float f);
/*< Set escape variable >*/


void sf_esc_point2_set_col (sf_esc_point2 esc_point, EscColor2 col);
/*< Set point color >*/


bool sf_esc_point2_is_child (sf_esc_point2 esc_point);
/*< Return true, if point is a parent >*/


bool sf_esc_point2_is_parent (sf_esc_point2 esc_point);
/*< Return true, if point is a parent >*/


void sf_esc_point2_become_parent (sf_esc_point2 esc_point);
/*< Change type to parent >*/


void sf_esc_point2_add_parent_link (sf_esc_point2 esc_point, EscAxisDim2 dim,
                                    EscDirection2 dir);
/*< Remove parent in direction (dir) along axis (dim) >*/


void sf_esc_point2_remove_parent_link (sf_esc_point2 esc_point, EscAxisDim2 dim);
/*< Remove parent in direction (dir) >*/


bool sf_esc_point2_has_parent_link (sf_esc_point2 esc_point, EscAxisDim2 dim,
                                    EscDirection2 *dir);
/*< Return true, if the point has a parent along axis (dim);
    dir will be set to its direction >*/


void sf_esc_point2_set_traced (sf_esc_point2 esc_point, bool traced);
/*< Set ray traced flag >*/


bool sf_esc_point2_is_traced (sf_esc_point2 esc_point);
/*< Return true, if point is ray traced >*/

#endif
