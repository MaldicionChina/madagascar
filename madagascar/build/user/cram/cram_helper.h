/* This file is automatically generated. DO NOT EDIT! */

#ifndef _cram_helper_h
#define _cram_helper_h


void sf_cram_trace_deriv (float *tracein, float *traceout, int n, float d);
/*< First order derivative of a trace[n] >*/


void sf_cram_trace_cint (float *trace, int n);
/*< Causal integration of a trace[n] >*/


void sf_cram_trace_acint (float *trace, int n);
/*< Anticausal integrations of a trace[n] >*/


/* Hilbert transform - borrowed from SU */
#define LHHALF 30       /* half-length of Hilbert transform filter*/
#define LH 2*LHHALF+1   /* filter length must be odd */
void sf_cram_trace_hilbert (int n, float *x, float *y);
/*< Hilbert tracnform of a trace x[n] -> y[n] >*/


int sf_cram_triangulate (int np, int st, float *xy, int *vertices, int *ntr);
/*< 2-D Delaunay triangulation of an raay of points >*/

#endif
