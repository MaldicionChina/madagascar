/* This file is automatically generated. DO NOT EDIT! */

#ifndef _esc_tracer2_h
#define _esc_tracer2_h


#include "esc_slow2.h"
#include "esc_point2.h"


typedef struct EscTracer2 *sf_esc_tracer2;
/* abstract data type */


typedef void (*sf_esc_tracer2_traj)(float z, float x, float a, int it, void *ud);
/*< Callback to output points along a ray trajectory >*/


void sf_esc_tracer2_reset_bounds (sf_esc_tracer2 esc_tracer);
/*< Reset spatial bounds >*/


sf_esc_tracer2 sf_esc_tracer2_init (sf_esc_slowness2 esc_slow);
/*< Initialize object >*/


void sf_esc_tracer2_close (sf_esc_tracer2 esc_tracer);
/*< Destroy object >*/


void sf_esc_tracer2_set_trajcb (sf_esc_tracer2 esc_tracer,
                                sf_esc_tracer2_traj traj, float dt, void *ud);
/*< Set trajectory callback  >*/


void sf_esc_tracer2_set_zmin (sf_esc_tracer2 esc_tracer, float zmin);
/*< Set spatial bound >*/


void sf_esc_tracer2_set_zmax (sf_esc_tracer2 esc_tracer, float zmax);
/*< Set spatial bound >*/


void sf_esc_tracer2_set_xmin (sf_esc_tracer2 esc_tracer, float xmin);
/*< Set spatial bound >*/


void sf_esc_tracer2_set_xmax (sf_esc_tracer2 esc_tracer, float xmax);
/*< Set spatial bound >*/


void sf_esc_tracer2_set_parab (sf_esc_tracer2 esc_tracer, bool parab);
/*< Set parabolic/straight ray flag >*/


void sf_esc_tracer2_set_mdist (sf_esc_tracer2 esc_tracer, float md);
/*< Set maximum allowed distance to travel for a ray >*/


void sf_esc_tracer2_set_df (sf_esc_tracer2 esc_tracer, float df);
/*< Set maximum allowed distance to travel per step (fraction of the cell size) >*/


float sf_esc_tracer2_sintersect (sf_esc_tracer2 esc_tracer, float *z, float *x, float *a,
                                 float dz, float dx, float da, float fz, float fx, float fa);
/*< Compute intersection of a straight trajectory from (z, x, a) with 
    the nearest wall defined by (dz, dx, da), return pseudotime along the trajectory >*/


float sf_esc_tracer2_pintersect (sf_esc_tracer2 esc_tracer, float *z, float *x, float *a, float *t, float *dd,
                                 float dz, float dx, float fz, float fx, float s, float sz, float sx, float md);
/*< Compute intersection of a parabolic trajectory from (z, x, a) with 
    the nearest wall defined by (dz, dx), return pseudotime along the trajectory >*/


bool sf_esc_tracer2_inside (sf_esc_tracer2 esc_tracer, float *z, float *x,
                            bool snap);
/*< Return true, if point (z,x) is inside the current limits;
    snap point to the boundary otherwise, if snap=true >*/


void sf_esc_tracer2_compute (sf_esc_tracer2 esc_tracer, float z, float x, float a,
                             float t, float l, sf_esc_point2 point, float *ae);
/*< Compute escape values for a point with subsurface coordinates (z, x, a) >*/

#endif
