import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
datasucjb2rsf2d kine2dvti ort3dhomodevcK ort3dhomodevK
ort3dpseudophomo tti2desep tti2dpseudop tti3de twolayer2dti
twolayer3dti vti2desep vti2dpseudop vti2dpseudop1 vti2dpseudopfvs0
vti3de
'''

ccprogs = '''
tti2delrdecomp tti2delrdecomp2p tti2delrsep tti2delrsep2p
tti2dpseudoplrsep tti3delrsepP tti3delrsepSH tti3delrsepSV
vti3delrsepP vti3delrsepSH vti3delrsepSV
'''

pyprogs ='''
'''
 
pymods = '''
'''

tprogs = '''
fftw
'''

subs = '''
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')  # include lexing's head and lib files
#    SConscript('../../api/c++/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])


##############################################################################
# Compiling C programs 
##############################################################################
src = Glob('[a-z]*.c')
underscore_inc = Glob('_[a-z]*.h')
objs = []

##############################################################################
# ADD FFTW3 LIB
##############################################################################
fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

# files with FFTW dependence
fftws = map(lambda x: File(x+'.c'),Split('seplowrank decomplowrank spectramultipy sepdivcurl'))

lapack = env.get('LAPACK')

for source in src:
    inc = env.RSF_Include(source,prefix='')
    if fftw or not source in fftws:
        obj = env.StaticObject(source)
        env.Depends(obj,inc)
        env.Depends(obj,underscore_inc)
        objs.append(obj)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    if (fftw or not prog in Split('tti2delrseparation vti2delrseparation')) \
        and (lapack or not prog in Split('ort3dhomodevK')):
        env.StaticObject('M'+prog+'.c')
        prog = env.Program (prog, map (lambda x: x + '.c',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw-devel')
    if root:
        env.Install (bindir, prog)

##############################################################################
# Compiling C++ programs 
##############################################################################

dynpre = env.get('DYNLIB','') 
libs = [dynpre+'rsf']+env.get('LIBS',[])

if not 'c++' in env.get('API',[]):
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    cancompile = lapack and (fftw or not prog in Split('''
    tti2delrdecomp tti2delrdecomp1p tti2delrdecomp2p tti2dedivcurl
    tti2delrsep tti2delrsep1p tti2delrsep2p tti2delrsep2pTrueAmp
    tti2delrsep2ps tti2dpseudoplrsep tti2dpseudosvlrsep tti3delrsep
    tti3delrsephomo vti2delrsep vti2delrsep2ps vti2delrsepTrueAmp
    tti3delrsepP tti3delrsepSH tti3delrsepSV tti3delrdecompP tti3delrdecompSV
    vti2dpseudoplrsep vti2dpseudoplrsep1 vti2dpseudoplrseprtm
    vti2dpseudosvlrsep vti3dedivcurl vti3delrdecompP vti3delrsep
    vti3delrsephomo vti3delrsephomo vti3delrsephomoP
    vti2delrsep2p vti3delrsepP vti3delrsepSV vti3delrsepSH
    ort3delrsep
    '''))
    if cancompile:
        prog = env.Program(prog, map(lambda x: x + '.cc',sources)+objs, 
                           LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

##############################################################################
# Compiling C programs (Test)
##############################################################################
if fftw:
    for prog in Split(tprogs):
        sources = ['T'+prog]
        bldutil.depends(env,sources,'T'+prog)     
        env.StaticObject('T'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources),PROGPREFIX='T',PROGSUFFIX='.x')
        
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
