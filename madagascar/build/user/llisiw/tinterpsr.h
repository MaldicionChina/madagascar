/* This file is automatically generated. DO NOT EDIT! */

#ifndef _tinterpsr_h
#define _tinterpsr_h


#include <rsf.h>


void tinterp_init(int nt     /* model dimension */,
		  float sds   /* original source sampling */,
		  float rds   /* original source sampling */);
/*< initialization >*/


void tinterp_linear(bool source /* source or receiver */,
		    float* p /* interpolated result */,
		    float x  /* position */,
		    float* p0, float* p1 /* values at both ends */);
/*< linear interpolation >*/


void dinterp_linear(bool source /* source or receiver */,
		    float* p /* interpolated result */,
		    float x  /* position */,
		    float* p0, float* p1 /* values at both ends */);
/*< linear interpolation (derivative) >*/


void tinterp_partial(bool source /* source or receiver */,
		     float* p /* interpolated result */,
		     float x  /* position */,
		     int n1, int n2 /* grid size */,
		     float dd /* grid horizontal sampling */,
		     float* p0, float* p1 /* values at both ends */);
/*< interpolation with fixed relative coordinate >*/


void dinterp_partial(bool source /* source or receiver */,
		     float* p /* interpolated result */,
		     float x  /* position */,
		     int n1, int n2 /* grid size */,
		     float dd /* grid horizontal sampling */,
		     float* p0, float* p1 /* values at both ends */);
/*< interpolation with fixed relative coordinate (derivative) >*/


void tinterp_hermite(bool source /* source or receiver */,
		     float* p /* interpolated result */,
		     float x  /* position */,
		     float* p0, float* p1 /* values at both ends */,
		     float* m0, float* m1 /* tangent at both ends */);
/*< cubic Hermite spline interpolation >*/


void dinterp_hermite(bool source /* source or receiver */,
		     float* p /* interpolated result */,
		     float x  /* position */,
		     float* p0, float* p1 /* values at both ends */,
		     float* m0, float* m1 /* tangent at both ends */);
/*< cubic Hermite spline interpolation (derivative) >*/


void tinterp_close();
/*< close >*/

#endif
