sftdconvert = rsf.doc.rsfprog('sftdconvert','user/llisiw/Mtdconvert.c','''Iterative time-to-depth velocity conversion ''')
sftdconvert.par('dix',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('t0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('x0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('f0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('cost',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('velocity',rsf.doc.rsfpar('bool','y','','''y, input is velocity / n, slowness-squared '''))
sftdconvert.par('order',rsf.doc.rsfpar('int','1','','''fastmarch accuracy order '''))
sftdconvert.par('thres',rsf.doc.rsfpar('float','10.','','''thresholding for caustics '''))
sftdconvert.par('niter',rsf.doc.rsfpar('int','1','','''number of nonlinear updates '''))
sftdconvert.par('cgiter',rsf.doc.rsfpar('int','200','','''number of CG iterations '''))
sftdconvert.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sftdconvert.par('eps',rsf.doc.rsfpar('float','0.1','','''regularization parameter '''))
sftdconvert.par('nline',rsf.doc.rsfpar('int','0','','''maximum number of line search (default turned-off) '''))
sftdconvert.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftdconvert.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sftdconvert.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sftdconvert.par('dix',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.par('t0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('x0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('f0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('cost',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.par('mval',rsf.doc.rsfpar('string ',desc=''''''))
sftdconvert.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.version('1.7')
sftdconvert.synopsis('''sftdconvert < in.rsf > out.rsf dix=dix.rsf t0=t_0.rsf x0=x_0.rsf f0=f_0.rsf grad=grad.rsf cost=cost.rsf mask=mini.rsf prec=prec.rsf velocity=y order=1 thres=10. niter=1 cgiter=200 shape=n eps=0.1 nline=0 verb=n tol=1.e-6 rect#=(1,1,...) mval=''','''''')
rsf.doc.progs['sftdconvert']=sftdconvert

