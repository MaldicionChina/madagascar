/* This file is automatically generated. DO NOT EDIT! */

#ifndef _upgradomp_h
#define _upgradomp_h


typedef struct Upgrad *upgrad;
/* abstract data type */


void upgrad_init(int mdim        /* number of dimensions */,
		 const int *mm   /* [dim] data size */,
		 const float *d  /* [dim] data sampling */);
/*< initialize >*/


upgrad upgrad_alloc();
/*< allocate memory for stencil >*/


void upgrad_set(upgrad upg /* stencil */,
		float *r0  /* reference */,
		int index  /* index */,
		int *flag  /* flag */,
		int length /* length */);
/*< supply reference >*/


void upgrad_close(upgrad upg);
/*< free allocated storage >*/


void upgrad_solve(int length       /* length */,
		  upgrad upg       /* stencil */,
		  const float *rhs /* right-hand side */, 
		  float *x         /* solution */,
		  const float *x0  /* initial solution */);
/*< inverse operator >*/


void upgrad_inverse(int length       /* length */,
		    upgrad upg       /* stencil */,
		    float *rhs       /* right-hand side */,
		    const float *x   /* solution */,
		    const float *x0  /* initial solution */);
/*< adjoint of inverse operator >*/


void upgrad_forw(int length     /* length */,
		 upgrad upg     /* stencil */,
		 const float *x /* solution */,
		 float *rhs     /* right-hand side */);
/*< forward operator >*/


void upgrad_adj(int length       /* length */,
		upgrad upg       /* stencil */,
		float *x         /* solution */,
		const float *rhs /* right-hand side */);
/*< adjoint operator >*/


void upgrad_ray(int length       /* length */,
		upgrad upg       /* stencil */,
		float *ray       /* ray */);
/*< extract ray density >*/

#endif
