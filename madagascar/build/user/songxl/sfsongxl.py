import rsf.doc

sffd2_10 = rsf.doc.rsfprog('sffd2_10','user/songxl/Mfd2_10.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sffd2_10.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2_10.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd2_10.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.par('isx',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.par('isz',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.version('1.7')
sffd2_10.synopsis('''sffd2_10 > out.rsf vel=vel.rsf < source.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sffd2_10']=sffd2_10

sffd2bs = rsf.doc.rsfprog('sffd2bs','user/songxl/Mfd2bs.c','''2-D Fourth-order Finite-difference wave extrapolation ''')
sffd2bs.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2bs.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sffd2bs.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd2bs.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('isx',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('isz',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sffd2bs.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sffd2bs.version('1.7')
sffd2bs.synopsis('''sffd2bs > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nb=30 c=0.01''','''''')
rsf.doc.progs['sffd2bs']=sffd2bs

sfffd0 = rsf.doc.rsfprog('sfffd0','user/songxl/Mffd0.c','''2-D FFD zero-offset migration: MPI + OMP''')
sfffd0.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd0.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfffd0.par('jr',rsf.doc.rsfpar('int','1','',''''''))
sfffd0.par('r0',rsf.doc.rsfpar('int','0','',''''''))
sfffd0.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sfffd0.par('err',rsf.doc.rsfpar('float','0.00001','',''''''))
sfffd0.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffd0.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd0.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd0.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sfffd0.version('1.7')
sfffd0.synopsis('''sfffd0 vel=vel.rsf < source.rsf > output.rsf opt=y jr=1 r0=0 jm=20 err=0.00001 alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0''','''''')
rsf.doc.progs['sfffd0']=sfffd0

sfffd2_ps = rsf.doc.rsfprog('sfffd2_ps','user/songxl/Mffd2_ps.c','''2-D Fourier finite-difference wave extrapolation, point source ''')
sfffd2_ps.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2_ps.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffd2_ps.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd2_ps.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.version('1.7')
sfffd2_ps.synopsis('''sfffd2_ps > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01''','''''')
rsf.doc.progs['sfffd2_ps']=sfffd2_ps

sfffd2dehf = rsf.doc.rsfprog('sfffd2dehf','user/songxl/Mffd2dehf.c','''2-D Fourier finite-difference wave extrapolation, smooth point source, depress high frequency ''')
sfffd2dehf.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2dehf.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffd2dehf.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd2dehf.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('ax',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfffd2dehf.par('az',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfffd2dehf.par('factor',rsf.doc.rsfpar('float','5.0/6.0','','''suppress HF parameter'''))
sfffd2dehf.version('1.7')
sfffd2dehf.synopsis('''sfffd2dehf > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=5.0 az=5.0 factor=5.0/6.0''','''''')
rsf.doc.progs['sfffd2dehf']=sfffd2dehf

sfffdantti4b_smsr = rsf.doc.rsfprog('sfffdantti4b_smsr','user/songxl/Mffdantti4b_smsr.c','''2-D Fourier finite-difference wave extrapolation ''')
sfffdantti4b_smsr.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffdantti4b_smsr.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffdantti4b_smsr.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffdantti4b_smsr.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffdantti4b_smsr.par('isz',rsf.doc.rsfpar('int','0','',''''''))
sfffdantti4b_smsr.par('err',rsf.doc.rsfpar('float','0.0001','',''''''))
sfffdantti4b_smsr.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffdantti4b_smsr.par('nbt',rsf.doc.rsfpar('int','126','',''''''))
sfffdantti4b_smsr.par('nbb',rsf.doc.rsfpar('int','126','',''''''))
sfffdantti4b_smsr.par('nbl',rsf.doc.rsfpar('int','128','',''''''))
sfffdantti4b_smsr.par('nbr',rsf.doc.rsfpar('int','128','',''''''))
sfffdantti4b_smsr.par('ct',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cb',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cl',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cr',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.version('1.7')
sfffdantti4b_smsr.synopsis('''sfffdantti4b_smsr > out.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf < source.rsf seta=seta.rsf opt=y dt= nt= isx= isz=0 err=0.0001 alpha=-0.7 nbt=126 nbb=126 nbl=128 nbr=128 ct=0.002 cb=0.002 cl=0.002 cr=0.002''','''''')
rsf.doc.progs['sfffdantti4b_smsr']=sfffdantti4b_smsr

sflfd2_25b = rsf.doc.rsfprog('sflfd2_25b','user/songxl/Mlfd2_25b.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sflfd2_25b.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflfd2_25b.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('isx',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('isz',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('nbt',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbb',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbl',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbr',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('ct',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cb',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cl',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cr',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('jm',rsf.doc.rsfpar('int','10','',''''''))
sflfd2_25b.version('1.7')
sflfd2_25b.synopsis('''sflfd2_25b > out.rsf vel=vel.rsf < source.rsf G=G.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz= nbt=100 nbb=100 nbl=100 nbr=100 ct=0.002 cb=0.002 cl=0.002 cr=0.002 jm=10''','''''')
rsf.doc.progs['sflfd2_25b']=sflfd2_25b

sflffd2an25 = rsf.doc.rsfprog('sflffd2an25','user/songxl/Mlffd2an25.c','''2-D Fourier finite-difference wave extrapolation ''')
sflffd2an25.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('paras',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflffd2an25.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('isx',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('isz',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2an25.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2an25.par('factor',rsf.doc.rsfpar('float','1.0','','''suppress HF parameter'''))
sflffd2an25.par('err',rsf.doc.rsfpar('float','0.0001','','''suppress HF parameter'''))
sflffd2an25.par('de',rsf.doc.rsfpar('bool','y','',''''''))
sflffd2an25.version('1.7')
sflffd2an25.synopsis('''sflffd2an25 > out.rsf < source.rsf velz=velz.rsf G=G.rsf paras=paras.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz= ax=2.0 az=2.0 factor=1.0 err=0.0001 de=y''','''''')
rsf.doc.progs['sflffd2an25']=sflffd2an25

sfofd2_10 = rsf.doc.rsfprog('sfofd2_10','user/songxl/Mofd2_10.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_10.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_10.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_10.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_10.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.version('1.7')
sfofd2_10.synopsis('''sfofd2_10 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_10']=sfofd2_10

sfofd2_25 = rsf.doc.rsfprog('sfofd2_25','user/songxl/Mofd2_25.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_25.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_25.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.version('1.7')
sfofd2_25.synopsis('''sfofd2_25 > out.rsf vel=vel.rsf < source.rsf G=G.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_25']=sfofd2_25

sfofd2_7 = rsf.doc.rsfprog('sfofd2_7','user/songxl/Mofd2_7.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_7.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_7.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_7.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_7.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.version('1.7')
sfofd2_7.synopsis('''sfofd2_7 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_7']=sfofd2_7

sforp = rsf.doc.rsfprog('sforp','user/songxl/Morp.c','''2-D 10th-order Finite-difference dispersion''')
sforp.par('vx',rsf.doc.rsfpar('float','2.1','',''''''))
sforp.par('vy',rsf.doc.rsfpar('float','2.05','',''''''))
sforp.par('vz',rsf.doc.rsfpar('float','2.0','',''''''))
sforp.par('e1',rsf.doc.rsfpar('float','0.3','',''''''))
sforp.par('e2',rsf.doc.rsfpar('float','0.1','',''''''))
sforp.par('e3',rsf.doc.rsfpar('float','1.0','',''''''))
sforp.par('phi',rsf.doc.rsfpar('float','45.0','',''''''))
sforp.version('1.7')
sforp.synopsis('''sforp > out.rsf < vel.rsf vx=2.1 vy=2.05 vz=2.0 e1=0.3 e2=0.1 e3=1.0 phi=45.0''','''''')
rsf.doc.progs['sforp']=sforp

sforthowave = rsf.doc.rsfprog('sforthowave','user/songxl/Morthowave.c','''Simple 3-D wave propagation ''')
sforthowave.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthowave.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('mid',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sforthowave.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sforthowave.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sforthowave.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sforthowave.version('1.7')
sforthowave.synopsis('''sforthowave < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf mid=mid.rsf verb=y cmplx=n pad1=1 snap=0''','''''')
rsf.doc.progs['sforthowave']=sforthowave

sfpspifcos2bs = rsf.doc.rsfprog('sfpspifcos2bs','user/songxl/Mpspifcos2bs.c','''1-D finite-difference wave extrapolation ''')
sfpspifcos2bs.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspifcos2bs.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspifcos2bs.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfpspifcos2bs.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpspifcos2bs.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('nv',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sfpspifcos2bs.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpspifcos2bs.version('1.7')
sfpspifcos2bs.synopsis('''sfpspifcos2bs < inp.rsf > out.rsf vel=vel.rsf source=source.rsf opt=y dt= nt= nv= isx= isz= nb=30 c=0.01''','''''')
rsf.doc.progs['sfpspifcos2bs']=sfpspifcos2bs

sfsp = rsf.doc.rsfprog('sfsp','user/songxl/Msp.c','''2-D Pseudo-spectral wave extrapolation ''')
sfsp.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsp.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfsp.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfsp.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sfsp.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfsp.par('ax',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfsp.par('az',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfsp.par('factor',rsf.doc.rsfpar('float','5.0/6.0','','''suppress HF parameter'''))
sfsp.version('1.7')
sfsp.synopsis('''sfsp > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nb=30 c=0.01 ax=5.0 az=5.0 factor=5.0/6.0''','''''')
rsf.doc.progs['sfsp']=sfsp

sflfdanc2_25 = rsf.doc.rsfprog('sflfdanc2_25','user/songxl/Mlfdanc2_25.cc','''2D high-order TTI Lowrank FD coefficient''')
sflfdanc2_25.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdanc2_25.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdanc2_25.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdanc2_25.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdanc2_25.par('size',rsf.doc.rsfpar('','17','','''stencil length'''))
sflfdanc2_25.par('de',rsf.doc.rsfpar('','1','','''stencil length'''))
sflfdanc2_25.version('1.7')
sflfdanc2_25.synopsis('''sflfdanc2_25 < velz.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=17 de=1''','''''')
rsf.doc.progs['sflfdanc2_25']=sflfdanc2_25

sflfdc1 = rsf.doc.rsfprog('sflfdc1','user/songxl/Mlfdc1.cc','''1D 10th-order Lowrank FD coefficient''')
sflfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sflfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sflfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc1.version('1.7')
sflfdc1.synopsis('''sflfdc1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sflfdc1']=sflfdc1

sflfdc2_25 = rsf.doc.rsfprog('sflfdc2_25','user/songxl/Mlfdc2_25.cc','''2D 10th-order Lowrank FD coefficient''')
sflfdc2_25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflfdc2_25.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc2_25.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdc2_25.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdc2_25.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc2_25.par('size',rsf.doc.rsfpar('','9','','''stencil length'''))
sflfdc2_25.version('1.7')
sflfdc2_25.synopsis('''sflfdc2_25 < velf.rsf > outm.rsf s1=s1f.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=9''','''''')
rsf.doc.progs['sflfdc2_25']=sflfdc2_25

sflfdc2_7 = rsf.doc.rsfprog('sflfdc2_7','user/songxl/Mlfdc2_7.cc','''2D 10th-order Lowrank FD coefficient''')
sflfdc2_7.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc2_7.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdc2_7.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdc2_7.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc2_7.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sflfdc2_7.version('1.7')
sflfdc2_7.synopsis('''sflfdc2_7 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=6''','''''')
rsf.doc.progs['sflfdc2_7']=sflfdc2_7

sflfdp1 = rsf.doc.rsfprog('sflfdp1','user/songxl/Mlfdp1.cc','''1D 10th-order Lowrank FD coefficient''')
sflfdp1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdp1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sflfdp1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sflfdp1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdp1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sflfdp1.version('1.7')
sflfdp1.synopsis('''sflfdp1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= size=6''','''''')
rsf.doc.progs['sflfdp1']=sflfdp1

sflffdan = rsf.doc.rsfprog('sflffdan','user/songxl/Mlffdan.cc','''2D high-order TTI Lowrank FFD coefficient''')
sflffdan.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflffdan.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflffdan.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflffdan.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflffdan.par('pr',rsf.doc.rsfpar('','0.25','','''time step'''))
sflffdan.par('size',rsf.doc.rsfpar('','9','','''stencil length'''))
sflffdan.par('de',rsf.doc.rsfpar('','1','','''stencil length'''))
sflffdan.version('1.7')
sflffdan.synopsis('''sflffdan < velz.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= pr=0.25 size=9 de=1''','''''')
rsf.doc.progs['sflffdan']=sflffdan

sformatrix = rsf.doc.rsfprog('sformatrix','user/songxl/Mormatrix.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sformatrix.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sformatrix.par('app',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sformatrix.par('real',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sformatrix.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sformatrix.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sformatrix.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sformatrix.par('xx1',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('xx2',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('xx3',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sformatrix.version('1.7')
sformatrix.synopsis('''sformatrix < velz.rsf fft=fft.rsf > middle.rsf app=app.rsf real=real.rsf seed=time(NULL eps=1.e-4 npk=20 xx1= xx2= xx3= dt=''','''''')
rsf.doc.progs['sformatrix']=sformatrix

sforthollr = rsf.doc.rsfprog('sforthollr','user/songxl/Morthollr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation with linearization. ''')
sforthollr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthollr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthollr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthollr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sforthollr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sforthollr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sforthollr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sforthollr.version('1.7')
sforthollr.synopsis('''sforthollr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sforthollr']=sforthollr

sfortholr = rsf.doc.rsfprog('sfortholr','user/songxl/Mortholr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfortholr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortholr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortholr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortholr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortholr.version('1.7')
sfortholr.synopsis('''sfortholr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortholr']=sfortholr

sfortllr = rsf.doc.rsfprog('sfortllr','user/songxl/Mortllr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation with linearization. ''')
sfortllr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortllr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortllr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortllr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortllr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortllr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortllr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortllr.version('1.7')
sfortllr.synopsis('''sfortllr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortllr']=sfortllr

sfortlr = rsf.doc.rsfprog('sfortlr','user/songxl/Mortlr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfortlr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortlr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortlr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortlr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortlr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortlr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortlr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortlr.version('1.7')
sfortlr.synopsis('''sfortlr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortlr']=sfortlr

