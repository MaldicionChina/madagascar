sffbrec = rsf.doc.rsfprog('sffbrec','user/pyang/Mfbrec.cu','''Forward-backword exact reconstruction using boundary saving''')
sffbrec.par('back',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffbrec.par('amp',rsf.doc.rsfpar('float','1000','','''maximum amplitude of ricker '''))
sffbrec.par('fm',rsf.doc.rsfpar('float','10','','''dominant freq of ricker '''))
sffbrec.par('dt',rsf.doc.rsfpar('float','','','''time interval '''))
sffbrec.par('nt',rsf.doc.rsfpar('int','','','''total modeling time steps '''))
sffbrec.par('ns',rsf.doc.rsfpar('int','1','','''total shots '''))
sffbrec.par('ng',rsf.doc.rsfpar('int','','','''total receivers in each shot '''))
sffbrec.par('jsx',rsf.doc.rsfpar('int','','','''source x-axis  jump interval  '''))
sffbrec.par('jsz',rsf.doc.rsfpar('int','0','','''source z-axis jump interval  '''))
sffbrec.par('jgx',rsf.doc.rsfpar('int','1','','''receiver x-axis jump interval '''))
sffbrec.par('jgz',rsf.doc.rsfpar('int','0','','''receiver z-axis jump interval '''))
sffbrec.par('sxbeg',rsf.doc.rsfpar('int','','','''x-begining index of sources, starting from 0 '''))
sffbrec.par('szbeg',rsf.doc.rsfpar('int','','','''z-begining index of sources, starting from 0 '''))
sffbrec.par('gxbeg',rsf.doc.rsfpar('int','','','''x-begining index of receivers, starting from 0 '''))
sffbrec.par('gzbeg',rsf.doc.rsfpar('int','','','''z-begining index of receivers, starting from 0 '''))
sffbrec.par('csdgather',rsf.doc.rsfpar('bool','y','','''default, common shot-gather; if n, record at every point'''))
sffbrec.par('ft',rsf.doc.rsfpar('int','0','','''first recorded time '''))
sffbrec.par('jt',rsf.doc.rsfpar('int','1','','''time interval '''))
sffbrec.version('1.7')
sffbrec.synopsis('''sffbrec < vinit.rsf > Fw1.rsf back=Fw2.rsf amp=1000 fm=10 dt= nt= ns=1 ng= jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=y ft=0 jt=1''','''Note: It is used as a demonstration that we can reconstruct the modeled
	wavefield exactly via boundary saving.
''')
rsf.doc.progs['sffbrec']=sffbrec

