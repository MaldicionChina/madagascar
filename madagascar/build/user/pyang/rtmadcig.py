sfrtmadcig = rsf.doc.rsfprog('sfrtmadcig','user/pyang/Mrtmadcig.c','''RTM and angle gather (ADCIG) extraction using poynting vector''')
sfrtmadcig.par('vecx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfrtmadcig.par('vecz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfrtmadcig.par('amp',rsf.doc.rsfpar('float','1.e3','','''maximum amplitude of ricker wavelet'''))
sfrtmadcig.par('fm',rsf.doc.rsfpar('float','','','''dominant freq of ricker '''))
sfrtmadcig.par('dt',rsf.doc.rsfpar('float','','','''time interval '''))
sfrtmadcig.par('nt',rsf.doc.rsfpar('int','','','''total modeling time steps '''))
sfrtmadcig.par('ns',rsf.doc.rsfpar('int','','','''total shots '''))
sfrtmadcig.par('ng',rsf.doc.rsfpar('int','','','''total receivers in each shot '''))
sfrtmadcig.par('nb',rsf.doc.rsfpar('int','20','','''thickness of split PML '''))
sfrtmadcig.par('na',rsf.doc.rsfpar('int','30','','''number of angles'''))
sfrtmadcig.par('kt',rsf.doc.rsfpar('int','200','','''record poynting vector at kt '''))
sfrtmadcig.par('jsx',rsf.doc.rsfpar('int','','','''source x-axis  jump interval  '''))
sfrtmadcig.par('jsz',rsf.doc.rsfpar('int','0','','''source z-axis jump interval  '''))
sfrtmadcig.par('jgx',rsf.doc.rsfpar('int','1','','''receiver x-axis jump interval '''))
sfrtmadcig.par('jgz',rsf.doc.rsfpar('int','0','','''receiver z-axis jump interval '''))
sfrtmadcig.par('sxbeg',rsf.doc.rsfpar('int','','','''x-begining index of sources, starting from 0 '''))
sfrtmadcig.par('szbeg',rsf.doc.rsfpar('int','','','''z-begining index of sources, starting from 0 '''))
sfrtmadcig.par('gxbeg',rsf.doc.rsfpar('int','','','''x-begining index of receivers, starting from 0 '''))
sfrtmadcig.par('gzbeg',rsf.doc.rsfpar('int','','','''z-begining index of receivers, starting from 0 '''))
sfrtmadcig.par('csdgather',rsf.doc.rsfpar('bool','y','','''default, common shot-gather; if n, record at every point'''))
sfrtmadcig.par('vmute',rsf.doc.rsfpar('float','1500','','''muting velocity to remove the low-freq noise, unit=m/s'''))
sfrtmadcig.par('tdmute',rsf.doc.rsfpar('int','2./(fm*dt)','','''number of deleyed time samples to mute '''))
sfrtmadcig.version('1.7')
sfrtmadcig.synopsis('''sfrtmadcig < vmodl.rsf > rtmadcig.rsf vecx=vecx.rsf vecz=vecz.rsf amp=1.e3 fm= dt= nt= ns= ng= nb=20 na=30 kt=200 jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=y vmute=1500 tdmute=2./(fm*dt)''','''SPML boundary condition combined with 4-th order finite difference,
effective boundary saving strategy used!
''')
rsf.doc.progs['sfrtmadcig']=sfrtmadcig

