sffftexp0 = rsf.doc.rsfprog('sffftexp0','user/fomels/Mfftexp0.c','''2-D FFT-based zero-offset exploding reflector modeling/migration  ''')
sffftexp0.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftexp0.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sffftexp0.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftexp0.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftexp0.par('nz',rsf.doc.rsfpar('int','','','''time samples (if migration) '''))
sffftexp0.par('dz',rsf.doc.rsfpar('float','','','''time sampling (if migration) '''))
sffftexp0.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sffftexp0.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sffftexp0.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftexp0.version('1.7')
sffftexp0.synopsis('''sffftexp0 < data.rsf > image.rsf snaps=snaps.rsf left=left.rsf right=right.rsf mig=n cmplx=n pad1=1 nz= dz= nt= dt= snap=0''','''''')
rsf.doc.progs['sffftexp0']=sffftexp0

