sfkirmod_newton = rsf.doc.rsfprog('sfkirmod_newton','user/zone/Mkirmod_newton.c','''Kirchhoff 2-D/2.5-D modeling in layered media with bending ray tracing.  ''')
sfkirmod_newton.par('curv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmod_newton.par('refl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmod_newton.par('picks',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfkirmod_newton.par('slopes',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfkirmod_newton.par('aniso',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmod_newton.par('velocity',rsf.doc.rsfpar('floats','','','''Assign velocity km/s [nc]'''))
sfkirmod_newton.par('xgradient',rsf.doc.rsfpar('floats','','',''' [nc]'''))
sfkirmod_newton.par('zgradient',rsf.doc.rsfpar('floats','','',''' [nc]'''))
sfkirmod_newton.par('xref',rsf.doc.rsfpar('floats','','','''Assign x-reference point [nc]'''))
sfkirmod_newton.par('zref',rsf.doc.rsfpar('floats','','','''Assign z-reference point [nc]'''))
sfkirmod_newton.par('lin',rsf.doc.rsfpar('bool','n','','''if linear operator '''))
sfkirmod_newton.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfkirmod_newton.par('absoff',rsf.doc.rsfpar('bool','n','','''y - h0 is not in shot coordinate system '''))
sfkirmod_newton.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfkirmod_newton.par('dt',rsf.doc.rsfpar('float','0.004','','''time sampling '''))
sfkirmod_newton.par('t0',rsf.doc.rsfpar('float','0.','','''time origin '''))
sfkirmod_newton.par('ns',rsf.doc.rsfpar('int','nx','','''number of shots (midpoints if cmp=y) '''))
sfkirmod_newton.par('s0',rsf.doc.rsfpar('float','x0','','''first shot (midpoint if cmp=y) '''))
sfkirmod_newton.par('ds',rsf.doc.rsfpar('float','dx','','''shot/midpoint increment '''))
sfkirmod_newton.par('nh',rsf.doc.rsfpar('int','nx','','''number of offsets '''))
sfkirmod_newton.par('h0',rsf.doc.rsfpar('float','0.','','''first offset '''))
sfkirmod_newton.par('dh',rsf.doc.rsfpar('float','dx','','''offset increment '''))
sfkirmod_newton.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfkirmod_newton.par('r0',rsf.doc.rsfpar('float','1.','','''normal reflectivity (if constant) '''))
sfkirmod_newton.par('r0',rsf.doc.rsfpar('float','1.','','''normal reflectivity (if constant) '''))
sfkirmod_newton.par('debug',rsf.doc.rsfpar('bool','n','','''debug flag '''))
sfkirmod_newton.par('fwdxini',rsf.doc.rsfpar('bool','n','','''use the result of previous iteration to be the xinitial of the next one '''))
sfkirmod_newton.par('vstatus',rsf.doc.rsfpar('int','','','''Velocity status (0 for constant v,1 for gradient v, and 2 for vti)'''))
sfkirmod_newton.par('niter',rsf.doc.rsfpar('int','500','','''The number of iterations'''))
sfkirmod_newton.par('tol',rsf.doc.rsfpar('double','0.00001','','''Assign a default value for tolerance'''))
sfkirmod_newton.par('order',rsf.doc.rsfpar('int','3','','''Interpolation order'''))
sfkirmod_newton.par('cmp',rsf.doc.rsfpar('bool','n','','''compute CMP instead of shot gathers '''))
sfkirmod_newton.par('freq',rsf.doc.rsfpar('float','0.2/dt','','''peak frequency for Ricker wavelet '''))
sfkirmod_newton.par('refl',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfkirmod_newton.par('rgrad',rsf.doc.rsfpar('string ',desc='''AVO gradient file (B/A) '''))
sfkirmod_newton.par('dip',rsf.doc.rsfpar('string ',desc='''reflector dip file '''))
sfkirmod_newton.par('refl',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfkirmod_newton.par('picks',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfkirmod_newton.par('slopes',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfkirmod_newton.version('1.7')
sfkirmod_newton.synopsis('''sfkirmod_newton < modl.rsf > data.rsf curv=curv.rsf refl=refl.rsf picks=picks.rsf slopes=slopes.rsf aniso=vti.rsf velocity= xgradient= zgradient= xref= zref= lin=n adj=n absoff=n nt= dt=0.004 t0=0. ns=nx s0=x0 ds=dx nh=nx h0=0. dh=dx verb=n r0=1. r0=1. debug=n fwdxini=n vstatus= niter=500 tol=0.00001 order=3 cmp=n freq=0.2/dt rgrad= dip=''','''''')
rsf.doc.progs['sfkirmod_newton']=sfkirmod_newton

