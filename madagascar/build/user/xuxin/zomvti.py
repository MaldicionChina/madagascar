sfzomvti = rsf.doc.rsfprog('sfzomvti','user/xuxin/Mzomvti.c','''acoustic VTI wavefield''')
sfzomvti.par('vnmo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('vz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('eta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('cr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzomvti.par('vmap',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('sigm',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('inv',rsf.doc.rsfpar('bool','n','','''if y, modeling; if n, migration '''))
sfzomvti.par('tau',rsf.doc.rsfpar('bool','n','','''if y, tau domain; if n, cartesian '''))
sfzomvti.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfzomvti.par('opt',rsf.doc.rsfpar('bool','n','','''optimze fft size '''))
sfzomvti.par('nt',rsf.doc.rsfpar('int','1','','''time n (if inv=y) '''))
sfzomvti.par('dt',rsf.doc.rsfpar('float','1.','','''time d (if inv=y) '''))
sfzomvti.par('bzl',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bzh',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bxl',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bxh',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('czl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('czh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('cxl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('cxh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('n3',rsf.doc.rsfpar('int','nt','','''wave time n '''))
sfzomvti.par('eps',rsf.doc.rsfpar('float','1','','''regularize sigma '''))
sfzomvti.version('1.7')
sfzomvti.synopsis('''sfzomvti vnmo=Fvnmo.rsf vz=Fvver.rsf eta=Fheta.rsf cr=Fcr.rsf wave=Fwave.rsf < Fimag.rsf > Fdata.rsf vmap=Fvmap.rsf sigm=Fsigm.rsf inv=n tau=n verb=n opt=n nt=1 dt=1. bzl=0 bzh=0 bxl=0 bxh=0 czl=1. czh=1. cxl=1. cxh=1. n3=nt eps=1''',''' * exploding reflector modeling : < imag.rsf sfzomvti inv=y > data.rsf
 * zero-offset migration        : < data.rsf sfzomvti inv=n > imag.rsf
 * prestack forward modeling    : < data.rsf sfzomvti inv=n > imag.rsf
 Need (1) vnmo *= 2, vver *= 2 (2) nr=1 ''')
rsf.doc.progs['sfzomvti']=sfzomvti

