import rsf.doc

sfcamig3 = rsf.doc.rsfprog('sfcamig3','user/psava/Mcamig3.c','''3-D common-azimuth modeling/migration with extended SSF ''')
sfcamig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcamig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfcamig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfcamig3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcamig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfcamig3.par('inv',rsf.doc.rsfpar('bool','n','','''y=modeling; n=migration '''))
sfcamig3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfcamig3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum number of refs '''))
sfcamig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfcamig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding mx'''))
sfcamig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding my'''))
sfcamig3.par('phx',rsf.doc.rsfpar('int','0','','''padding hx'''))
sfcamig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper mx '''))
sfcamig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper my '''))
sfcamig3.par('thx',rsf.doc.rsfpar('int','0','','''taper hx '''))
sfcamig3.par('nw',rsf.doc.rsfpar('int','','',''''''))
sfcamig3.par('dw',rsf.doc.rsfpar('float','','',''''''))
sfcamig3.par('ow',rsf.doc.rsfpar('float','0.','',''''''))
sfcamig3.par('mode',rsf.doc.rsfpar('string ',desc=''''''))
sfcamig3.version('1.7')
sfcamig3.synopsis('''sfcamig3 slo=Fs.rsf < Fd.rsf > Fw.rsf < Fi.rsf ompchunk=1 ompnth=0 verb=n eps=0.01 inv=n twoway=n nrmax=1 dtmax=0.004 pmx=0 pmy=0 phx=0 tmx=0 tmy=0 thx=0 nw= dw= ow=0. mode=''','''''')
rsf.doc.progs['sfcamig3']=sfcamig3

sfewefd2d = rsf.doc.rsfprog('sfewefd2d','user/psava/Mewefd2d.c','''2D elastic time-domain FD modeling ''')
sfewefd2d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd2d.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd2d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd2d.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd2d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd2d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd2d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd2d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd2d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd2d.version('1.7')
sfewefd2d.synopsis('''sfewefd2d < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfewefd2d']=sfewefd2d

sfhic2ang = rsf.doc.rsfprog('sfhic2ang','user/psava/Mhic2ang.c','''angle decomposition of CIPs ''')
sfhic2ang.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('nor',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('tlt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('ani',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfhic2ang.par('anis',rsf.doc.rsfpar('bool','n','','''anisotropy flag '''))
sfhic2ang.par('adj',rsf.doc.rsfpar('bool','y','','''adj flag '''))
sfhic2ang.par('nth',rsf.doc.rsfpar('int','90','',''''''))
sfhic2ang.par('oth',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dth',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nph',rsf.doc.rsfpar('int','360','',''''''))
sfhic2ang.par('oph',rsf.doc.rsfpar('float','-180','',''''''))
sfhic2ang.par('dph',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nhx',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('ohx',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dhx',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nhy',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('ohy',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dhy',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('oht',rsf.doc.rsfpar('float','0.','',''''''))
sfhic2ang.par('dht',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nps',rsf.doc.rsfpar('int','251','',''''''))
sfhic2ang.par('ops',rsf.doc.rsfpar('float','-25','',''''''))
sfhic2ang.par('dps',rsf.doc.rsfpar('float','0.2','',''''''))
sfhic2ang.version('1.7')
sfhic2ang.synopsis('''sfhic2ang < Fcip.rsf > Fang.rsf vel=Fvel.rsf nor=Fnor.rsf tlt=Ftlt.rsf ani=Fani.rsf verb=n anis=n adj=y nth=90 oth=0 dth=1. nph=360 oph=-180 dph=1. nhx=1 ohx=0 dhx=1. nhy=1 ohy=0 dhy=1. nht=1 oht=0. dht=1. nps=251 ops=-25 dps=0.2''','''''')
rsf.doc.progs['sfhic2ang']=sfhic2ang

sfic = rsf.doc.rsfprog('sfic','user/psava/Mic.c','''Imaging condition ''')
sfic.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfic.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfic.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfic.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfic.par('version',rsf.doc.rsfpar('int','0','','''I.C. version (see paper) '''))
sfic.par('eps',rsf.doc.rsfpar('float','1e-6','','''epsilon '''))
sfic.version('1.7')
sfic.synopsis('''sfic < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nbuf=1 version=0 eps=1e-6''','''''')
rsf.doc.progs['sfic']=sfic

sflaps2d = rsf.doc.rsfprog('sflaps2d','user/psava/Mlaps2d.c','''OpenMP lagged-products in the time-domain ''')
sflaps2d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps2d.par('cc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflaps2d.par('buf',rsf.doc.rsfpar('bool','n','',''''''))
sflaps2d.par('nhz',rsf.doc.rsfpar('int','0','','''number of lags on the z axis '''))
sflaps2d.par('nhx',rsf.doc.rsfpar('int','0','','''number of lags on the x axis '''))
sflaps2d.par('nht',rsf.doc.rsfpar('int','0','','''number of lags on the t axis '''))
sflaps2d.version('1.7')
sflaps2d.synopsis('''sflaps2d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n buf=n nhz=0 nhx=0 nht=0''','''''')
rsf.doc.progs['sflaps2d']=sflaps2d

sflwefd2d = rsf.doc.rsfprog('sflwefd2d','user/psava/Mlwefd2d.c','''linearized acoustic time-domain FD modeling ''')
sflwefd2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('liw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('lid',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sflwefd2d.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sflwefd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflwefd2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sflwefd2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sflwefd2d.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sflwefd2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sflwefd2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sflwefd2d.par('nqz',rsf.doc.rsfpar('int','sf_n(a1)','',''''''))
sflwefd2d.par('nqx',rsf.doc.rsfpar('int','sf_n(a2)','',''''''))
sflwefd2d.par('oqz',rsf.doc.rsfpar('float','sf_o(a1)','',''''''))
sflwefd2d.par('oqx',rsf.doc.rsfpar('float','sf_o(a2)','',''''''))
sflwefd2d.version('1.7')
sflwefd2d.synopsis('''sflwefd2d < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf vel=Fvel.rsf den=Fden.rsf ref=Fref.rsf wfl=Fwfl.rsf > Fdat.rsf liw=Fliw.rsf lid=Flid.rsf ompchunk=1 ompnth=0 verb=n snap=n free=n expl=n jdata=1 jsnap=nt nqz=sf_n(a1) nqx=sf_n(a2) oqz=sf_o(a1) oqx=sf_o(a2)''','''''')
rsf.doc.progs['sflwefd2d']=sflwefd2d

sfsic3d = rsf.doc.rsfprog('sfsic3d','user/psava/Msic3d.c','''Local slant stacks I.C. ''')
sfsic3d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsic3d.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsic3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfsic3d.par('stack',rsf.doc.rsfpar('bool','n','',''''''))
sfsic3d.par('sig',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nanga',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('oanga',rsf.doc.rsfpar('float','0.0','',''''''))
sfsic3d.par('danga',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nangb',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('oangb',rsf.doc.rsfpar('float','0.0','',''''''))
sfsic3d.par('dangb',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nl',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('dl',rsf.doc.rsfpar('float','1.','',''''''))
sfsic3d.par('ol',rsf.doc.rsfpar('float','0.','',''''''))
sfsic3d.version('1.7')
sfsic3d.synopsis('''sfsic3d < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n stack=n sig=1.0 nanga=1 oanga=0.0 danga=1.0 nangb=1 oangb=0.0 dangb=1.0 nl=1 dl=1. ol=0.''','''''')
rsf.doc.progs['sfsic3d']=sfsic3d

sfsrmig3 = rsf.doc.rsfprog('sfsrmig3','user/psava/Msrmig3.c','''3-D S/R migration with extended SSF ''')
sfsrmig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('sls',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('cig',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsrmig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsrmig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfsrmig3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfsrmig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfsrmig3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfsrmig3.par('nrmax',rsf.doc.rsfpar('int','1','','''max number of refs '''))
sfsrmig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''max time error '''))
sfsrmig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfsrmig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y '''))
sfsrmig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x   '''))
sfsrmig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y   '''))
sfsrmig3.par('vpvs',rsf.doc.rsfpar('float','1.','','''Vp/Vs ratio '''))
sfsrmig3.par('hsym',rsf.doc.rsfpar('bool','n','',''''''))
sfsrmig3.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('oht',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dht',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('oht',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dht',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('hsym',rsf.doc.rsfpar('bool','n','',''''''))
sfsrmig3.par('nhh',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('ohh',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dhh',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('nha',rsf.doc.rsfpar('int','180','',''''''))
sfsrmig3.par('oha',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dha',rsf.doc.rsfpar('float','2.0','',''''''))
sfsrmig3.par('nhb',rsf.doc.rsfpar('int','180','',''''''))
sfsrmig3.par('ohb',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dhb',rsf.doc.rsfpar('float','2.0','',''''''))
sfsrmig3.par('sls',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfsrmig3.par('itype',rsf.doc.rsfpar('string ',desc='''imaging condition type
       o = zero lag (default)
       e = extended
       x = space-lags
       h = space-lags magnitude
       t = time-lag
    '''))
sfsrmig3.weblink('http://ahay.org/wiki/Guide_to_madagascar_programs#sfsrmig3')
sfsrmig3.version('1.7')
sfsrmig3.synopsis('''sfsrmig3 slo=Fs_s.rsf sls=Fs_r.rsf < Fw_s.rsf rwf=Fw_r.rsf > Fi.rsf cig=Fc.rsf ompchunk=1 ompnth=0 verb=y eps=0.01 twoway=n nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 vpvs=1. hsym=n nht=1 oht=0 dht=0.1 nht=1 oht=0 dht=0.1 hsym=n nhh=1 ohh=0 dhh=0.1 nha=180 oha=0 dha=2.0 nhb=180 ohb=0 dhb=2.0 itype=''','''''')
rsf.doc.progs['sfsrmig3']=sfsrmig3

sfsrmod3 = rsf.doc.rsfprog('sfsrmod3','user/psava/Msrmod3.c','''3-D S/R modeling with extended split-step ''')
sfsrmod3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('sls',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsrmod3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfsrmod3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfsrmod3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfsrmod3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum number of refs '''))
sfsrmod3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfsrmod3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfsrmod3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y '''))
sfsrmod3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x   '''))
sfsrmod3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y   '''))
sfsrmod3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfsrmod3.par('sls',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfsrmod3.version('1.7')
sfsrmod3.synopsis('''sfsrmod3 slo=Fs_s.rsf sls=Fs_r.rsf < Fw_s.rsf > Fw_r.rsf ref=Fr.rsf ompchunk=1 ompnth=0 verb=y eps=0.01 nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 twoway=n''','''''')
rsf.doc.progs['sfsrmod3']=sfsrmod3

sfwdf = rsf.doc.rsfprog('sfwdf','user/psava/Mwdf.c','''Assymptotic Wigner distribution ''')
sfwdf.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfwdf.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwdf.par('nh1',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.par('nh2',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.par('nh3',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.version('1.7')
sfwdf.synopsis('''sfwdf < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0''','''''')
rsf.doc.progs['sfwdf']=sfwdf

sfwei = rsf.doc.rsfprog('sfwei','user/psava/Mwei.c','''3-D modeling/migration with extended SSF ''')
sfwei.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('dat',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('cip',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwei.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwei.par('causal',rsf.doc.rsfpar('bool','n','','''causality '''))
sfwei.par('causal',rsf.doc.rsfpar('bool','n','','''causality '''))
sfwei.par('irun',rsf.doc.rsfpar('string ',desc=''''''))
sfwei.version('1.7')
sfwei.synopsis('''sfwei slo=Fslo.rsf < Fsou.rsf dat=Frec.rsf > Fcic.rsf coo=Fcoo.rsf cip=Feic.rsf > Fwfl.rsf verb=n causal=n causal=n irun=''','''''')
rsf.doc.progs['sfwei']=sfwei

sfwigner = rsf.doc.rsfprog('sfwigner','user/psava/Mwigner.c','''Assymptotic Wigner distribution in space-time ''')
sfwigner.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfwigner.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwigner.par('nh1',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('nh2',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('nh3',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('wk',rsf.doc.rsfpar('float','0.0','',''''''))
sfwigner.version('1.7')
sfwigner.synopsis('''sfwigner < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0 wk=0.0''','''''')
rsf.doc.progs['sfwigner']=sfwigner

sfxcor2d = rsf.doc.rsfprog('sfxcor2d','user/psava/Mxcor2d.c','''OpenMP time- or freq-domain cross-correlation on axes 1,2,3 ''')
sfxcor2d.par('uu',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfxcor2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfxcor2d.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfxcor2d.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfxcor2d.version('1.7')
sfxcor2d.synopsis('''sfxcor2d < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1''','''''')
rsf.doc.progs['sfxcor2d']=sfxcor2d

sfzomig3 = rsf.doc.rsfprog('sfzomig3','user/psava/Mzomig3.c','''3-D zero-offset modeling/migration with extended SSF ''')
sfzomig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfzomig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfzomig3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfzomig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfzomig3.par('inv',rsf.doc.rsfpar('bool','n','','''y=modeling; n=migration '''))
sfzomig3.par('causal',rsf.doc.rsfpar('bool','n','','''y=causal; n=anti-causal '''))
sfzomig3.par('twoway',rsf.doc.rsfpar('bool','y','','''two-way traveltime '''))
sfzomig3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum references '''))
sfzomig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfzomig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfzomig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y'''))
sfzomig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x'''))
sfzomig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y '''))
sfzomig3.par('nw',rsf.doc.rsfpar('int','','',''''''))
sfzomig3.par('dw',rsf.doc.rsfpar('float','','',''''''))
sfzomig3.par('ow',rsf.doc.rsfpar('float','0.','',''''''))
sfzomig3.par('mode',rsf.doc.rsfpar('string ',desc=''''''))
sfzomig3.version('1.7')
sfzomig3.synopsis('''sfzomig3 slo=Fs.rsf < Fd.rsf > Fw.rsf < Fi.rsf ompchunk=1 ompnth=0 verb=n eps=0.01 inv=n causal=n twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 nw= dw= ow=0. mode=''','''''')
rsf.doc.progs['sfzomig3']=sfzomig3

sfcorop = rsf.doc.rsfprog('sfcorop','user/psava/Mcorop.py','''''')
sfcorop.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorop.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfcorop.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag'''))
sfcorop.par('ncor',rsf.doc.rsfpar('int','100','',''''''))
sfcorop.version('1.7')
sfcorop.synopsis('''sfcorop opr=Fopr.rsf < Fcor.rsf > Fwfl.rsf verb=n adj=n ncor=100''','''Correlation operator w/ adjoint
wfl [file] : is taken from stdin
opr [file] : is taken from  "opr"
Requires both files to have the same dimensions
''')
rsf.doc.progs['sfcorop']=sfcorop

sfpwave3d = rsf.doc.rsfprog('sfpwave3d','user/psava/Mpwave3d.py','''''')
sfpwave3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfpwave3d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('ot',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('ox',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dx',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('ny',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('oy',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dy',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('nz',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('oz',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dz',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('vel',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cx',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cy',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cz',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.version('1.7')
sfpwave3d.synopsis('''sfpwave3d > Fdat.rsf verb=n nt= ot= dt= nx= ox= dx= ny= oy= dy= nz= oz= dz= vel=1.0 cx=1.0 cy=1.0 cz=1.0''','''generate a plane in t-x-y-z space
cx x + cy y + cz z - vel t = 0
(the plane goes through the origin)
''')
rsf.doc.progs['sfpwave3d']=sfpwave3d

sfocor3d = rsf.doc.rsfprog('sfocor3d','user/psava/Mocor3d.py','''''')
sfocor3d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfocor3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfocor3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag'''))
sfocor3d.par('ocox',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ocoy',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ocoz',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ntlag',rsf.doc.rsfpar('int','100','',''''''))
sfocor3d.par('nxlag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.par('nylag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.par('nzlag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.version('1.7')
sfocor3d.synopsis('''sfocor3d < Fwfl.rsf opr=Fopr.rsf > Fcor.rsf verb=n adj=n ocox=0.0 ocoy=0.0 ocoz=0.0 ntlag=100 nxlag=0 nylag=0 nzlag=0''','''Oriented correlation
wfl [file] : is taken from stdin
opr [file] : is taken from  "opr"
requires both files to have the same dimensions
correlation is computed at coordinates (ocox,ocoy,ocoz)
the (half) lags are: ntlag, nxlag, nylag, nzlag
''')
rsf.doc.progs['sfocor3d']=sfocor3d

sffindmax = rsf.doc.rsfprog('sffindmax','user/psava/Mfindmax.py','''''')
sffindmax.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sffindmax.version('1.7')
sffindmax.synopsis('''sffindmax < Fin.rsf > Fou.rsf verb=n''','''find max value in a file
''')
rsf.doc.progs['sffindmax']=sffindmax

