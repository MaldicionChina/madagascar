import rsf.doc

sfbspvel2 = rsf.doc.rsfprog('sfbspvel2','user/cram/Mbspvel2.c','''B-spline coefficients for a 2-D (an)isotropic velocity model. ''')
sfbspvel2.par('vx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('eta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfbspvel2.par('vx',rsf.doc.rsfpar('string ',desc='''Horizontal velocity (auxiliary input file name)'''))
sfbspvel2.par('eta',rsf.doc.rsfpar('string ',desc='''Anellipticity (auxiliary input file name)'''))
sfbspvel2.par('theta',rsf.doc.rsfpar('string ',desc='''Tilt angle (auxiliary input file name)'''))
sfbspvel2.version('1.7')
sfbspvel2.synopsis('''sfbspvel2 < velz.rsf > out.rsf vx=velx.rsf eta=eta.rsf theta=theta.rsf verb=n''','''''')
rsf.doc.progs['sfbspvel2']=sfbspvel2

sfcram2 = rsf.doc.rsfprog('sfcram2','user/cram/Mcram2.c','''2-D angle-domain Kirchhoff migration based on escape tables. ''')
sfcram2.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram2.par('vz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram2.par('imap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('smap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipagath',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipimap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipsmap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('full',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('mute',rsf.doc.rsfpar('bool','n','','''y - mute signal in constant z plane before stacking '''))
sfcram2.par('sqsmb',rsf.doc.rsfpar('bool','n','','''y - output energy traces instead of semblance '''))
sfcram2.par('oazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z min '''))
sfcram2.par('oazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z max '''))
sfcram2.par('dazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle (abs.value) at z min '''))
sfcram2.par('dazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle (abs.value) at z max '''))
sfcram2.par('ts',rsf.doc.rsfpar('int','3','','''Tapering length at the edges of the source direction '''))
sfcram2.par('th',rsf.doc.rsfpar('int','5','','''Tapering length at the edges of the receiver direction '''))
sfcram2.par('vconst',rsf.doc.rsfpar('float','1.5','','''Constant velocity, if vz= is not used '''))
sfcram2.par('smax',rsf.doc.rsfpar('float','10*fabsf (ds)','','''Maximum allowed width of the shot ray branch  '''))
sfcram2.par('hmax',rsf.doc.rsfpar('float','20*fabsf (dh)','','''Maximum allowed width of the receiver ray branch  '''))
sfcram2.par('data',rsf.doc.rsfpar('string ',desc='''Processed prestack data (auxiliary input file name)'''))
sfcram2.par('vz',rsf.doc.rsfpar('string ',desc='''Velocity model for amplitude weights (auxiliary input file name)'''))
sfcram2.par('imap',rsf.doc.rsfpar('string ',desc='''Scattering gathers illumination (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('smap',rsf.doc.rsfpar('string ',desc='''Scattering gathers semblance (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipagath',rsf.doc.rsfpar('string ',desc='''Dip angle gathers (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipimap',rsf.doc.rsfpar('string ',desc='''Dip gathers illumination (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipsmap',rsf.doc.rsfpar('string ',desc='''Dip gathers semblance (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('full',rsf.doc.rsfpar('string ',desc='''Full image (scattering angle, dip angle, z, x) (auxiliary output file name)'''))
sfcram2.version('1.7')
sfcram2.synopsis('''sfcram2 < esct.rsf data=data.rsf vz=vz.rsf > oimag.rsf imap=oimap.rsf smap=osmap.rsf dipagath=dimag.rsf dipimap=dimap.rsf dipsmap=dsmap.rsf full=fimag.rsf mute=n sqsmb=n oazmin=180.0 oazmax=180.0 dazmin=180.0 dazmax=180.0 ts=3 th=5 vconst=1.5 smax=10*fabsf (ds) hmax=20*fabsf (dh)''','''''')
rsf.doc.progs['sfcram2']=sfcram2

sfescrt2 = rsf.doc.rsfprog('sfescrt2','user/cram/Mescrt2.c','''Escape tables by ray tracing with escape equations in 2-D. ''')
sfescrt2.par('traj',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfescrt2.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescrt2.par('na',rsf.doc.rsfpar('int','360','','''Number of phase angles '''))
sfescrt2.par('df',rsf.doc.rsfpar('float','0.25','','''< Maximum distance to travel per step (fraction of the cell size) >'''))
sfescrt2.par('md',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum distance for a ray to travel (default - up to model boundaries) '''))
sfescrt2.par('aper',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum aperture in x and y directions from current point (default - up to model boundaries) '''))
sfescrt2.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfescrt2.par('parab',rsf.doc.rsfpar('bool','y','','''y - use parabolic approximation of trajectories, n - straight line '''))
sfescrt2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescrt2.par('nt',rsf.doc.rsfpar('int','1001','','''Number of time samples for each trajectory '''))
sfescrt2.par('dt',rsf.doc.rsfpar('float','0.001','','''Time sampling '''))
sfescrt2.par('traj',rsf.doc.rsfpar('string ',desc='''Trajectory output (auxiliary output file name)'''))
sfescrt2.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescrt2.version('1.7')
sfescrt2.synopsis('''sfescrt2 < spdom.rsf > out.rsf traj=traj.rsf vspl=vspline.rsf na=360 df=0.25 md=SF_HUGE aper=SF_HUGE nc=0 parab=y verb=n nt=1001 dt=0.001''','''''')
rsf.doc.progs['sfescrt2']=sfescrt2

sfpcrdata2 = rsf.doc.rsfprog('sfpcrdata2','user/cram/Mpcrdata2.c','''Prepare data for 2-D angle-domain migration. ''')
sfpcrdata2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpcrdata2.par('absoff',rsf.doc.rsfpar('bool','n','','''y - absolute offset (default - relative to shot axis) '''))
sfpcrdata2.par('filter',rsf.doc.rsfpar('bool','y','','''y - antialiasing filter for data '''))
sfpcrdata2.par('KMAH',rsf.doc.rsfpar('bool','y','','''y - account for phase shifts due to KMAH index '''))
sfpcrdata2.par('diff',rsf.doc.rsfpar('bool','y','','''y - apply half-order differentiation '''))
sfpcrdata2.version('1.7')
sfpcrdata2.synopsis('''sfpcrdata2 < data.rsf > out.rsf verb=n absoff=n filter=y KMAH=y diff=y''','''''')
rsf.doc.progs['sfpcrdata2']=sfpcrdata2

