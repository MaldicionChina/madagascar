sftrishape = rsf.doc.rsfprog('sftrishape','system/generic/Mtrishape.c','''2-D irregular data interpolation using triangulation and shaping regularization. ''')
sftrishape.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftrishape.par('n1',rsf.doc.rsfpar('int','','',''''''))
sftrishape.par('n2',rsf.doc.rsfpar('int','','',''''''))
sftrishape.par('d1',rsf.doc.rsfpar('float','1.','',''''''))
sftrishape.par('d2',rsf.doc.rsfpar('float','1.','',''''''))
sftrishape.par('o1',rsf.doc.rsfpar('float','0.','',''''''))
sftrishape.par('o2',rsf.doc.rsfpar('float','0.','',''''''))
sftrishape.par('zero',rsf.doc.rsfpar('float','0.','','''level surface '''))
sftrishape.par('niter',rsf.doc.rsfpar('int','0','','''number of iterations '''))
sftrishape.par('rect1',rsf.doc.rsfpar('int','1','',''''''))
sftrishape.par('rect2',rsf.doc.rsfpar('int','1','','''smoothing regularization '''))
sftrishape.par('nw',rsf.doc.rsfpar('int','2','','''interpolator size '''))
sftrishape.par('fast',rsf.doc.rsfpar('bool','n','','''if y, use GMRES inversion '''))
sftrishape.par('sym',rsf.doc.rsfpar('bool','n','','''if y, use symmetric shaping '''))
sftrishape.par('tol',rsf.doc.rsfpar('float','1e-3','','''tolerance for stopping iteration '''))
sftrishape.par('pattern',rsf.doc.rsfpar('string ',desc='''pattern file for output dimensions (auxiliary input file name)'''))
sftrishape.version('1.7')
sftrishape.synopsis('''sftrishape < in.rsf > out.rsf pattern=pattern.rsf n1= n2= d1=1. d2=1. o1=0. o2=0. zero=0. niter=0 rect1=1 rect2=1 nw=2 fast=n sym=n tol=1e-3''','''''')
rsf.doc.progs['sftrishape']=sftrishape

