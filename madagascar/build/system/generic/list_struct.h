/* This file is automatically generated. DO NOT EDIT! */

#ifndef _list_struct_h
#define _list_struct_h


#define DIMENSION 3
/* number of dimensions */


enum elemType {EMPTY = -1,BOUNDARY,ADDED};
/* Flag to distinguish elements */


typedef struct CEdge *Edge;
typedef struct CNode *Node;
/* abstract data types */


void CreateNodeList (int n);
/*< Allocates an empty list >*/


void FreeNodeList (void);
/*< Frees all the storage associated with the list. >*/


Node AppendNode (double x, double y, double z, enum elemType type);
/*< Appends a node to the end of the list. 
 * Returns a pointer to the inserted node 
 * (useful for incremental insertions.) >*/


int NodeNumber (Node node);
/*< Translates a pointer to a node into the node number in the list.
 * If node == NULL, returns the total number of nodes. >*/


Node GetNode (int n);
/*< Returns n-th node. >*/


void ReadEdgeList (sf_file edgefile);
/*< Reads an edge list from the file edgefile. >*/


void WriteList (sf_file nodefile, sf_file edgefile);
/*< Writes a  node list to the file nodefile.
 * Writes an edge list to the file edgefile. >*/


void NodeExec (void (* exec) (Node));
/*< Recursive operations on nodes in the list. >*/


void NodeOut (Node q, float *x, float *y, float *z);
/*< Copy a Nodes to 3 numbers. >*/


int EdgeOut (float *e);
/*< Copy Edges to a float array. Returns the number of edges. >*/


void WriteNode (Node list);
/*< Debugging >*/


void WriteEdge (Edge list);
/*< Debugging >*/


void CreateEdgeList (void);
/*< Allocates an empty list >*/


void ClearEdgeList (void);
/*< Frees added edges in the list. >*/


void FreeEdgeList (void);
/*< Frees all the storage associated with the list. >*/


Edge AppendEdge (Node left, Node right, enum elemType type);
/*< Appends an edge to the end of the list. 
 * Returns a pointer to the inserted node 
 * (useful for incremental insertions.) >*/


int EdgeNumber (void);
/*< Returns the number of edges in the list. >*/


void EdgeEnumerate (void);
/*< Give numbers to edges. >*/


void EdgeExec (void (* exec) (Edge));
/*< Recursive operations on edges in the list. >*/


double EdgeLength (Edge ab);
/*< Returns the length of an edge. >*/


void MoveNode (Node q, double x, double y);
/*< New position for the node. >*/


void NodeValues(int s, int n, const float *value);
/*< go through the list of nodes starting from s and reset values >*/

#endif
