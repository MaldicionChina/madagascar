/* This file is automatically generated. DO NOT EDIT! */

#ifndef _delaunay_h
#define _delaunay_h


#include <rsf.h>


#include "list_struct.h"
#include "_basic_struct.h"


void DelaunayNew (double xmin, double xmax, 
		  double ymin, double ymax, double zero);
/*< Creates a big initial triangle, using the bounding box information.
 * Adds 3 nodes  and 3 edges. 
 * The nodes are placed at 
 * {(3*xmin-xmax)/2, ymin}, {(3*xmax-xmin)/2}, 
 * {(xmax+xmin)/2, 2*ymax-ymin}
 >*/


void DelaunayFree (void);
/*<  * Frees the storage associated with the triangulation.
 * (Except nodes and edges.)
 >*/


void DelaunayWrite (sf_file file);
/*< Writes the nodes of the triangulation
 * to file. The output format is
 *
 * a_0 b_0 c_0
 * a_1 b_1 c_1
 >*/


void InsertNode (Node q);
/*< Inserts node q to the triangulation. >*/


void InsertEdge (Edge ab);
/*< Inserts a boundary edge to the triangulation,
 * making the necessary adjustments. >*/


void BoundingBox (double* box);
/*< Initializes a bounding box >*/


double Interpolate (Node q);
/*< Find a value at a certain point
 * by linear triangular interpolation >*/


int DelaunayRefine (int nr);
/*< Refine triangulation by inserting nr nodes
 * Return the number left >*/

#endif
